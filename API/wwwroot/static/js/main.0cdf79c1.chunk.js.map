{"version":3,"sources":["utils/paths.ts","app/models/pagination.ts","app/agent/agent.ts","utils/date-fns-utils.ts","app/stores/profileStore.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/models/profile.ts","app/stores/userStore.ts","app/stores/modalStore.ts","app/models/comment.ts","app/stores/commentStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/profiles/followings/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activity/dashboard/ActivityListItemAttendees.tsx","features/activity/dashboard/ActivityListItem.tsx","features/activity/dashboard/ActivityList.tsx","features/activity/dashboard/ActivityFilters.tsx","features/activity/dashboard/ActivityListItemPlaceholder.tsx","features/activity/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","features/user/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/layout/LoadingComponent.tsx","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/—ÅategoryOptions.ts","app/common/form/DateInput.tsx","app/common/modal/ConfirmModal.tsx","features/activity/form/ActivityForm.tsx","features/activity/details/ActivityDetailedHeader.tsx","features/activity/details/ActivityDetailedInfo.tsx","features/activity/details/ActivityDetailedChat.tsx","features/activity/details/ActivityDetailedSidebar.tsx","features/activity/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/main/ProfileHeader.tsx","app/common/imageUploader/PhotoWidgetDropzone.tsx","app/common/imageUploader/PhotoWidgetCropper.tsx","app/common/imageUploader/PhotoUploadWidget.tsx","features/profiles/photos/ProfilePhotos.tsx","features/profiles/about/ProfileEditForm.tsx","features/profiles/about/ProfileAbout.tsx","features/profiles/followings/ProfileFollowings.tsx","features/profiles/activities/ProfileActivityCard.tsx","features/profiles/activities/ProfileEvents.tsx","features/profiles/main/ProfileContent.tsx","features/profiles/main/ProfilePage.tsx","app/layout/PrivateRoute.tsx","features/user/VkLogin.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["homePagePath","activitiesPath","activityPath","id","manageActivityPath","createActivityPath","profileImagePlaceholder","categoryImagePath","imageName","logoPath","errorsPath","allProfilesPath","profilePath","userName","photosPath","followPath","apiBaseUrl","process","vkLoginPath","vkLoginSuccessState","vkOAuthUrl","frontUrl","PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","errors","hasOwnProperty","history","push","errorMessages","key","flat","toast","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","getList","params","getActivity","create","activity","edit","attend","attendActivityPath","Account","currentUser","login","user","register","vkLogin","accessToken","email","accountVkLoginPath","Profiles","getProfile","uploadPhoto","file","formaData","FormData","append","setMainImage","setMainPhotoPath","deleteImage","updateProfile","profile","updateFollowing","getFollowings","predicate","followListPath","getProfileActivities","profileActivitiesPath","formatDate","date","dateFormat","format","ActiveTab","ActivityStore","_activities","Map","_selectedActivity","undefined","_isLoadingInitial","_isLoading","_pagination","_pagingParams","_predicates","set","hasActivity","activityId","has","setIsLoadingInitial","value","setIsLoading","setPagination","setPagingParams","setPredicate","forEach","loadActivities","loadInitial","axiosPagingParams","result","setActivity","loadActivity","runInAction","createActivity","activityFormValues","userStore","currentUserName","attendee","getProfileWrapper","runInLoading","newActivity","toActivity","hostUserName","attendees","editActivity","updatedActivity","deleteActivity","isGoing","some","p","isHosting","host","find","Date","updateAttendance","selectedActivity","filter","u","cancelSelectedActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","fn","console","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","Object","entries","activitiesByDate","reduce","activities","URLSearchParams","toString","toISOString","jwtLocalKey","CommonStore","_error","_token","window","localStorage","getItem","_appLoaded","setItem","removeItem","Profile","displayName","image","UserStore","_user","_isLoadingVkLogin","credentials","setToken","modalStore","closeModal","logout","registerValues","loadCurrentUser","log","setCurrentUserMainImage","setDisplayName","redirectToVkLogin","location","replace","ModalStore","_content","_isOpen","openModal","content","ProfileStore","_profile","_isLoadingProfile","_isUploading","_activeTab","_followings","_isLoadingFollowers","_profileActivities","loadProfile","photo","photos","isMain","currentMain","profileValues","about","activityStore","followToAdd","targetingCurrentProfile","followingCount","loadProfileActivities","clearProfileActivities","loadFollowings","followings","activeTab","Following","Followers","ChatCommentFormValues","CommentStore","_comments","_hubConnection","createHubConnection","HubConnectionBuilder","withUrl","commentUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comments","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","ActivitiesStore","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","currentImage","currentDisplayName","Menu","inverted","fixed","Container","MenuItem","as","NavLink","exact","to","header","src","alt","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Item","Link","icon","onClick","isLoading","Reveal","animated","Content","visible","style","width","fluid","color","hidden","event","preventDefault","handleFollow","basic","loading","aboutLength","aboutContent","length","substring","truncate","Card","Header","Description","extra","Icon","followingImageStyles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","title","marginRight","venue","secondary","clearing","description","floated","groupedActivities","sub","predicates","vertical","marginTop","active","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","isLoadingInitial","useState","isLoadingNextActivities","setIsLoadingNextActivities","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPagesCount","initialLoad","Column","Loader","TextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","ActivityFormValues","category","city","LoadingComponent","Dimmer","TextAreaInput","SelectInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","categoryOptions","DateInput","selected","ConfirmModal","confirmCallback","cancelCallback","headerContent","confirmLoading","setConfirmLoading","display","justifyContent","padding","useParams","useHistory","uuid","onDeleteClick","handleDeleteActivity","enableReinitialize","rows","placeholderText","showTimeSelect","timeCaption","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","verticalAlign","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","clearSelectedActivity","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","details","Modal","open","isOpen","onClose","Statistic","zoneStyles","borderRadius","paddingTop","zoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","assign","File","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","dragMode","autoCropArea","modal","background","zoomOnWheel","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","inAddPhotoMode","setInAddPhotoMode","target","setTarget","isCurrentUser","isUploading","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","onSubmitted","inEditMode","setInEditMode","ProfileActivityCard","now","Meta","Pane","menuItem","panes","profileActivities","Tab","menu","onTabChange","index","activeIndex","defaultActiveIndex","isLoadingFollowers","menuPosition","e","isLoadingProfile","PrivateRoute","Component","component","rest","VkLogin","hash","useLocation","queryString","access_token","state","finally","setAppLoaded","appLoaded","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","TestError","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0cdf79c1.chunk.js","sourcesContent":["export const homePagePath = '/';\r\n\r\nexport const activitiesPath = `/activities`;\r\nexport const activityPath = (id: string) => activitiesPath + `/${id}`;\r\nexport const attendActivityPath = (id: string) => activityPath(id) + '/attend';\r\nexport const manageActivityPath = (id: string) => `/manage/${id}`;\r\nexport const createActivityPath = '/createActivity'\r\n\r\nexport const profileImagePlaceholder = '/assets/user.png'\r\nexport const categoryImagePath = (imageName: string) => `/assets/categoryImages/${imageName}`\r\nexport const logoPath = '/assets/logo.png'\r\n\r\nexport const errorsPath = '/errors';\r\nexport const serverErrorPath = '/server-error';\r\n\r\nexport const accountPath = '/account';\r\nexport const loginPath = '/account/login';\r\nexport const registerPath = '/account/register';\r\nexport const accountVkLoginPath = (accessToken: string, email: string) => \r\n    `/account/vklogin?accessToken=${accessToken}&email=${email}`\r\n\r\nexport const allProfilesPath = '/profiles';\r\nexport const profilePath = (userName: string) => allProfilesPath + `/${userName}`;\r\n\r\nexport const photosPath = (id: string) => `/photos/${id}`;\r\nexport const setMainPhotoPath = (id: string) => photosPath(id) + '/setmain';\r\n\r\nexport const followPath = (userName: string) => `/follow/${userName}`;\r\nexport const followListPath = (userName: string, predicate: string) => followPath(userName) + `?predicate=${predicate}`\r\n\r\nexport const profileActivitiesPath = (userName: string, predicate: 'hosting' | 'future' | 'past') =>\r\n    `/profiles/${userName}/activities?predicate=${predicate}`\r\n\r\n//urls\r\nexport const apiBaseUrl = process.env.REACT_APP_API_URL;\r\nexport const chatUrl = process.env.REACT_APP_CHAT_URL;\r\nexport const frontUrl = process.env.REACT_APP_FRONT_FULL_URL;\r\nexport const commentUrl = (activityId: string) => chatUrl + `?activityId=${activityId}`;\r\n\r\n//vk login\r\nconst vkClientId = 8070387;\r\nexport const vkLoginPath = '/vklogin'\r\nexport const vkRedirectUrl = frontUrl + vkLoginPath\r\nexport const vkLoginSuccessState = 'success'\r\nconst vkAuthScope = 4 + 4194304; //photos + email\r\nexport const vkOAuthUrl = `https://oauth.vk.com/authorize?\r\nclient_id=${vkClientId}&display=page&\r\nredirect_uri=${vkRedirectUrl}&\r\nscope=${vkAuthScope}&\r\nresponse_type=token&v=5.131&state=${vkLoginSuccessState}`;","export interface Pagination\r\n{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItemsCount: number;\r\n    totalPagesCount: number;\r\n}\r\n\r\nexport class PaginatedResult<T>\r\n{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination)\r\n    {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams\r\n{\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 4)\r\n    {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, {AxiosError, AxiosResponse}              from \"axios\";\r\nimport {Activity, ActivityFormValues, ProfileActivity} from \"../models/activity\";\r\nimport {toast}                                         from \"react-toastify\";\r\nimport {history}                                          from \"../../index\";\r\nimport {store}                                            from \"../stores/store\";\r\nimport {User, UserFormValues} from \"../models/user\";\r\nimport {\r\n    accountPath,\r\n    activitiesPath,\r\n    activityPath, allProfilesPath,\r\n    attendActivityPath, apiBaseUrl, followListPath, followPath,\r\n    loginPath,\r\n    photosPath, profileActivitiesPath,\r\n    profilePath,\r\n    registerPath, setMainPhotoPath, accountVkLoginPath\r\n} from \"../../utils/paths\";\r\nimport {\r\n    Profile,\r\n    Photo,\r\n    ProfileFormValues,\r\n    FollowingStatus,\r\n    ProfileActivitiesPredicate,\r\n    FollowingsPredicate\r\n}                        from \"../models/profile\";\r\nimport {PaginatedResult} from \"../models/pagination\";\r\n\r\nconst sleep = (delay: number) =>\r\n{\r\n    return new Promise((resolve) =>\r\n    {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = apiBaseUrl;\r\n\r\naxios.interceptors.request.use(config =>\r\n{\r\n    const token = store.commonStore.token;\r\n    if (token)\r\n        config.headers.Authorization = `Bearer ${token}`\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async (response) =>\r\n    {\r\n        if(process.env.NODE_ENV === 'development')\r\n            await sleep(1000);\r\n\r\n        const pagination = response.headers['pagination'];\r\n        if(pagination)\r\n        {\r\n            response.data = new PaginatedResult<any>(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n\r\n        return response;\r\n    },\r\n    (error: AxiosError) =>\r\n    {\r\n        const {data, status} = error.response!;\r\n\r\n        switch (status)\r\n        {\r\n            case 400:\r\n                if (data.errors)\r\n                {\r\n                    //bad guid\r\n                    if (data.errors.hasOwnProperty('guid'))\r\n                    {\r\n                        history.push('/not-found');\r\n                    }\r\n\r\n                    //validation error\r\n                    const errorMessages = [];\r\n                    for (const key in data.errors)\r\n                    {\r\n                        if (data.errors[key])\r\n                        {\r\n                            errorMessages.push(data.errors[key]);\r\n                        }\r\n                    }\r\n\r\n                    throw errorMessages.flat();\r\n                }\r\n                else\r\n                {\r\n                    //bad request\r\n                    toast.error(data);\r\n                }\r\n                break;\r\n            case 401:\r\n                toast.error('Unauthorised');\r\n                break;\r\n            case 404:\r\n                history.push('/not-found');\r\n                break;\r\n            case 500:\r\n                store.commonStore.error = data;\r\n                history.push('/server-error')\r\n                break;\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    })\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    getList: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(activitiesPath, {params})\r\n        .then(responseBody),\r\n    getActivity: (id: string) => requests.get<Activity>(activityPath(id)),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(activitiesPath, activity),\r\n    edit: (activity: ActivityFormValues) => requests.put<void>(activityPath(activity.id || \"unknown\"), activity),\r\n    delete: (id: string) => requests.delete<void>(activityPath(id)),\r\n\r\n    //attend (for regular user) or cancel (for host)\r\n    attend: (id: string) => requests.post<void>(attendActivityPath(id), {}),\r\n}\r\n\r\nconst Account = {\r\n    currentUser: () => requests.get<User>(accountPath),\r\n    login: (user: UserFormValues) => requests.post<User>(loginPath, user),\r\n    register: (user: UserFormValues) => requests.post<User>(registerPath, user),\r\n    vkLogin: (accessToken: string, email: string) => \r\n        requests.post<User>(accountVkLoginPath(accessToken, email), {})\r\n}\r\n\r\nconst Profiles = {\r\n    getProfile: (userName: string) => requests.get<Profile>(profilePath(userName)),\r\n    uploadPhoto: (file: Blob) =>\r\n    {\r\n        let formaData = new FormData();\r\n        formaData.append('File', file);\r\n        return axios.post<Photo>('photos', formaData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n\r\n    setMainImage: (id: string) => requests.post<void>(setMainPhotoPath(id), {}),\r\n    deleteImage: (id: string) => requests.delete<void>(photosPath(id)),\r\n    updateProfile: (profile: ProfileFormValues) => requests.put<void>(allProfilesPath, profile),\r\n\r\n    updateFollowing: (userName: string) => requests.post<FollowingStatus>(followPath(userName), {}),\r\n    getFollowings: (userName: string, predicate: FollowingsPredicate) =>\r\n        requests.get<Profile[]>((followListPath(userName, predicate))),\r\n\r\n    getProfileActivities: (userName: string, predicate: ProfileActivitiesPredicate) =>\r\n        requests.get<ProfileActivity[]>(profileActivitiesPath(userName, predicate))\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import {format} from \"date-fns\"\r\n\r\nexport function formatDate(date: Date | null, dateFormat: string)\r\n{\r\n    if(!date)\r\n        return \"INCORRECT DATE\";\r\n\r\n    return format(date!, dateFormat);\r\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport {\r\n    Profile,\r\n    Photo,\r\n    ProfileFormValues,\r\n    ProfileActivitiesPredicate,\r\n    FollowingsPredicate\r\n}                                                  from \"../models/profile\";\r\nimport agent                                       from \"../agent/agent\";\r\nimport {store}                                     from \"./store\";\r\nimport {ProfileActivity}                           from \"../models/activity\";\r\n\r\nexport enum ActiveTab\r\n{\r\n    About,\r\n    Photos,\r\n    Events,\r\n    Followers,\r\n    Following,\r\n}\r\n\r\nexport default class ProfileStore\r\n{\r\n    private _profile: Profile | null = null;\r\n    private _isLoadingProfile = false;\r\n    private _isUploading = false;\r\n    private _isLoading = false; //setting main or deleting photo\r\n    private _activeTab: ActiveTab = 0;\r\n\r\n    private _followings: Profile[] = [];\r\n    private _isLoadingFollowers = false;\r\n\r\n    private _profileActivities: ProfileActivity[] = []\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n        reaction(() => this._activeTab,\r\n            activeTab =>\r\n            {\r\n                if (activeTab === ActiveTab.Following || activeTab === ActiveTab.Followers)\r\n                {\r\n                    const predicate = activeTab === ActiveTab.Followers ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate)\r\n                }\r\n                else\r\n                {\r\n                    this._followings = [];\r\n                }\r\n            })\r\n    }\r\n\r\n    public get profile()\r\n    {\r\n        return this._profile;\r\n    }\r\n\r\n    public get profileActivities()\r\n    {\r\n        return this._profileActivities;\r\n    }\r\n\r\n    public get isLoadingProfile()\r\n    {\r\n        return this._isLoadingProfile;\r\n    }\r\n\r\n    public get isUploading()\r\n    {\r\n        return this._isUploading;\r\n    }\r\n\r\n    public get isLoading()\r\n    {\r\n        return this._isLoading;\r\n    }\r\n\r\n    public get isLoadingFollowers()\r\n    {\r\n        return this._isLoadingFollowers;\r\n    }\r\n\r\n    public get followings()\r\n    {\r\n        return this._followings;\r\n    }\r\n\r\n    public get isCurrentUser()\r\n    {\r\n        const currentUserName = store.userStore.currentUserName;\r\n        if (this._profile)\r\n        {\r\n            return currentUserName === this._profile.userName;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public get activeTab()\r\n    {\r\n        return this._activeTab;\r\n    }\r\n\r\n    public set activeTab(value: any)\r\n    {\r\n        this._activeTab = value;\r\n    }\r\n\r\n    loadProfile = async (userName: string) =>\r\n    {\r\n        this._isLoadingProfile = true;\r\n\r\n        try\r\n        {\r\n            const profile = await agent.Profiles.getProfile(userName);\r\n            runInAction(() =>\r\n            {\r\n                this._profile = profile\r\n            })\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isLoadingProfile = false);\r\n        }\r\n    }\r\n\r\n    public uploadPhoto = async (file: Blob) =>\r\n    {\r\n        this._isUploading = true;\r\n\r\n        try\r\n        {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain)\r\n                    {\r\n                        store.userStore.setCurrentUserMainImage(photo.url);\r\n                        this._profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isUploading = false);\r\n        }\r\n    }\r\n\r\n    public setMainImage = async (image: Photo) =>\r\n    {\r\n        const currentMain = this._profile?.photos?.find(p => p.isMain);\r\n        if (currentMain?.id === image.id)\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.setMainImage(image.id);\r\n\r\n            store.userStore.setCurrentUserMainImage(image.url);\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile && this._profile.photos)\r\n                {\r\n                    this._profile.image = image.url;\r\n                    currentMain!.isMain = false;\r\n                    this._profile.photos.find(p => p.id === image.id)!.isMain = true;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public deleteImage = async (image: Photo) =>\r\n    {\r\n        if (!this._profile?.photos?.some(p => p.id === image.id))\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.deleteImage(image.id);\r\n\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.photos = this._profile.photos?.filter(p => p.id !== image.id);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public updateProfile = async (profileValues: ProfileFormValues) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.updateProfile(profileValues);\r\n\r\n            store.userStore.setDisplayName(profileValues.displayName);\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.displayName = profileValues.displayName;\r\n                    this._profile.about = profileValues.about;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public updateFollowing = (userName: string) =>\r\n    {\r\n        this.runInLoading(async () =>\r\n        {\r\n            const status = await agent.Profiles.updateFollowing(userName);\r\n            const following = status.following;\r\n            store.activityStore.updateAttendeeFollowing(userName);\r\n\r\n            const followToAdd = following ? 1 : -1;\r\n\r\n            runInAction(() =>\r\n            {\r\n                //changing current profile counts\r\n                if (this._profile)\r\n                {\r\n                    const targetingCurrentProfile = this._profile.userName === userName;\r\n                    const isCurrentUserProfile = this._profile.userName === store.userStore.currentUserName\r\n\r\n                    if(isCurrentUserProfile)\r\n                    {\r\n                        this._profile.followingCount += followToAdd;\r\n                    }\r\n                    else if (targetingCurrentProfile)\r\n                    {\r\n                        this._profile.followersCount += followToAdd;\r\n                        this._profile.following = following;\r\n                    }\r\n                }\r\n\r\n\r\n                this._followings.forEach(profile =>\r\n                {\r\n                    if (profile.userName === userName)\r\n                    {\r\n                        profile.followersCount += followToAdd;\r\n                        profile.following = following;\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    public loadProfileActivities = (predicate: ProfileActivitiesPredicate | undefined) =>\r\n    {\r\n        if(!predicate)\r\n            return;\r\n\r\n        return this.runInLoading(async () =>\r\n        {\r\n            if(this._profile)\r\n            {\r\n                const activities = await agent.Profiles.getProfileActivities(this._profile.userName, predicate);\r\n\r\n                activities.forEach(activity =>\r\n                {\r\n                    activity.date = new Date(activity.date);\r\n                })\r\n\r\n                runInAction(() => this._profileActivities = activities)\r\n            }\r\n        })\r\n    }\r\n\r\n    public clearProfileActivities = () => this._profileActivities = []\r\n\r\n    private loadFollowings = async (predicate: FollowingsPredicate) =>\r\n    {\r\n        this._isLoadingFollowers = true;\r\n\r\n        try\r\n        {\r\n            const followings = await agent.Profiles.getFollowings(this._profile?.userName!, predicate);\r\n            runInAction(() => this._followings = followings)\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isLoadingFollowers = false);\r\n        }\r\n    }\r\n\r\n    private runInLoading = async (fn: () => Promise<void>) =>\r\n    {\r\n        this.setIsLoading(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    private setIsLoading(value: boolean)\r\n    {\r\n        this._isLoading = value;\r\n    }\r\n}","import {Activity, ActivityFormValues}              from \"../models/activity\";\r\nimport {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent                                       from \"../agent/agent\";\r\nimport {formatDate}                      from \"../../utils/date-fns-utils\";\r\nimport {store}                    from \"./store\";\r\nimport {Pagination, PagingParams} from \"../models/pagination\";\r\n\r\nexport default class ActivityStore\r\n{\r\n    public _activities = new Map<string, Activity>(); //key - id, value - activity\r\n    private _selectedActivity: Activity | undefined = undefined;\r\n    private _isLoadingInitial = false;\r\n    private _isLoading = false; //creating, editing, deleting activity\r\n    private _pagination: Pagination | null = null;\r\n    private _pagingParams = new PagingParams();\r\n    private _predicates = new Map().set('all', true);\r\n\r\n    public constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this._predicates.keys(),\r\n            () =>\r\n            {\r\n                this._pagingParams = new PagingParams();\r\n                this._activities.clear();\r\n                this.loadActivities();\r\n            })\r\n    }\r\n\r\n    public get activitiesByDate()\r\n    {\r\n        return Array.from(this._activities.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    public get groupedActivities()\r\n    {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>\r\n            {\r\n                const date = formatDate(activity.date, \"dd MMM yyyy\");\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    public get selectedActivity()\r\n    {\r\n        return this._selectedActivity;\r\n    }\r\n\r\n    public get isLoadingInitial()\r\n    {\r\n        return this._isLoadingInitial;\r\n    }\r\n\r\n    public get isLoading()\r\n    {\r\n        return this._isLoading;\r\n    }\r\n\r\n    public get axiosPagingParams()\r\n    {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this._pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this._pagingParams.pageSize.toString());\r\n\r\n        this._predicates.forEach((value, key) =>\r\n        {\r\n            if(key === 'startDate')\r\n            {\r\n                params.append(key, (value as Date).toISOString());\r\n            }\r\n            else\r\n            {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    public get pagination()\r\n    {\r\n        return this._pagination;\r\n    }\r\n\r\n    public get predicates()\r\n    {\r\n        return this._predicates;\r\n    }\r\n\r\n    public clearSelectedActivity()\r\n    {\r\n        this._selectedActivity = undefined;\r\n    }\r\n\r\n    public hasActivity = (activityId: string) =>\r\n    {\r\n        return this._activities.has(activityId);\r\n    }\r\n\r\n    public setIsLoadingInitial = (value: boolean) => this._isLoadingInitial = value;\r\n\r\n    public setIsLoading = (value: boolean) => this._isLoading = value;\r\n\r\n    public setPagination = (value: Pagination) => this._pagination = value;\r\n\r\n    public setPagingParams = (value: PagingParams) => this._pagingParams = value;\r\n\r\n    public setPredicate = (predicate: string, value: string | Date) =>\r\n    {\r\n        const resetParams = () =>\r\n        {\r\n            this._predicates.forEach((value, key) =>\r\n            {\r\n                if(key !== 'startDate')\r\n                    this._predicates.delete(key);\r\n            })\r\n        }\r\n\r\n        if(predicate === 'startDate')\r\n        {\r\n            this._predicates.delete(predicate); // for MobX reaction\r\n        }\r\n        else\r\n        {\r\n            resetParams();\r\n        }\r\n\r\n        this._predicates.set(predicate, value);\r\n    }\r\n\r\n    public loadActivities = async () =>\r\n    {\r\n        await this.loadInitial(async () =>\r\n        {\r\n            const result = await agent.Activities.getList(this.axiosPagingParams);\r\n\r\n            result.data.forEach(activity =>\r\n            {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n        })\r\n    }\r\n\r\n    public loadActivity = async (id: string) =>\r\n    {\r\n        return await this.loadInitial<Activity>(async () =>\r\n        {\r\n            let activity = this.getActivity(id);\r\n\r\n            if (activity)\r\n            {\r\n                this._selectedActivity = activity;\r\n                return activity;\r\n            }\r\n            else\r\n            {\r\n                activity = await agent.Activities.getActivity(id);\r\n\r\n                this.setActivity(activity);\r\n                runInAction(() => this._selectedActivity = activity);\r\n\r\n                return activity;\r\n            }\r\n        })\r\n    }\r\n\r\n    public createActivity = async (activityFormValues: ActivityFormValues) =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n        const attendee = store.userStore.getProfileWrapper();\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.create(activityFormValues);\r\n\r\n            const newActivity = activityFormValues.toActivity();\r\n            newActivity.hostUserName = userName!;\r\n            newActivity.attendees = [attendee!];\r\n\r\n            this.setActivity(newActivity)\r\n            runInAction(() => this._selectedActivity = newActivity)\r\n        })\r\n    }\r\n\r\n    public editActivity = async (activity: ActivityFormValues) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.edit(activity);\r\n\r\n            runInAction(() =>\r\n            {\r\n                if(activity.id)\r\n                {\r\n                    const updatedActivity = {...this.getActivity(activity.id), ...activity} as Activity\r\n\r\n                    this._activities.set(activity.id, updatedActivity);\r\n                    this._selectedActivity = updatedActivity;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public deleteActivity = async (id: string) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() =>\r\n            {\r\n                this._activities.delete(id);\r\n            })\r\n        })\r\n    }\r\n\r\n    private setActivity = (activity: Activity) =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n        if(userName)\r\n        {\r\n            activity.isGoing = activity.attendees?.some(p => p.userName === userName)\r\n            activity.isHosting = activity.hostUserName === userName;\r\n            activity.host = activity.attendees?.find(p => p.userName === activity.hostUserName);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this._activities.set(activity.id, activity);\r\n    }\r\n\r\n    public updateAttendance = async () =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n\r\n            runInAction(() =>\r\n            {\r\n               if(this.selectedActivity?.isGoing)\r\n               {\r\n                   //cancelled the attendance\r\n                   this.selectedActivity.attendees = this.selectedActivity\r\n                            .attendees?.filter(u => u.userName !== userName)\r\n\r\n                   this.selectedActivity!.isGoing = false;\r\n               }\r\n               else\r\n               {\r\n                   //joined activity\r\n                   const attendee = store.userStore.getProfileWrapper()\r\n                   this.selectedActivity?.attendees?.push(attendee!);\r\n                   this.selectedActivity!.isGoing = true;\r\n               }\r\n\r\n               this._activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        })\r\n    }\r\n\r\n    public cancelSelectedActivityToggle = async () =>\r\n    {\r\n        if(!this._selectedActivity)\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.attend(this._selectedActivity!.id);\r\n            runInAction(() => {\r\n                this._selectedActivity!.isCancelled = !this._selectedActivity!.isCancelled\r\n                this._activities.set(this._selectedActivity!.id, this._selectedActivity!);\r\n            });\r\n        })\r\n    }\r\n\r\n    public updateAttendeeFollowing = (userName: string) =>\r\n    {\r\n        this._activities.forEach(activity =>\r\n        {\r\n            activity.attendees.forEach(attendee =>\r\n            {\r\n                if(attendee.userName === userName)\r\n                {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    private getActivity = (id: string) =>\r\n    {\r\n        return this._activities.get(id);\r\n    }\r\n\r\n    private runInLoading = async (fn: () => Promise<void>) =>\r\n    {\r\n        this.setIsLoading(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    private loadInitial = async <T>(fn: () => Promise<T>) =>\r\n    {\r\n        this.setIsLoadingInitial(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoadingInitial(false);\r\n        }\r\n    }\r\n}","import ServerError                    from \"../models/serverError\";\r\nimport {makeAutoObservable, reaction} from \"mobx\";\r\n\r\nconst jwtLocalKey = \"jwt\";\r\n\r\nexport default class CommonStore\r\n{\r\n    private _error: ServerError | null = null;\r\n    private _token: string | null = window.localStorage.getItem(jwtLocalKey);\r\n    private _appLoaded = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this._token,\r\n            token =>\r\n            {\r\n                if (token)\r\n                {\r\n                    window.localStorage.setItem(jwtLocalKey, token);\r\n                }\r\n                else\r\n                {\r\n                    window.localStorage.removeItem(jwtLocalKey);\r\n                }\r\n            })\r\n    }\r\n\r\n    public set error(value: ServerError | null)\r\n    {\r\n        this._error = value;\r\n    }\r\n\r\n    public get error()\r\n    {\r\n        return this._error;\r\n    }\r\n\r\n    public setToken(value: string | null)\r\n    {\r\n        this._token = value;\r\n    }\r\n\r\n    public get token()\r\n    {\r\n        return this._token;\r\n    }\r\n\r\n    public setAppLoaded()\r\n    {\r\n        this._appLoaded = true;\r\n    }\r\n\r\n    public get appLoaded()\r\n    {\r\n        return this._appLoaded;\r\n    }\r\n}","import {User} from \"./user\";\r\n\r\nexport interface Profile\r\n{\r\n    userName: string;\r\n    displayName: string;\r\n    about?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n\r\n    following: boolean; //whether current user following this one\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile\r\n{\r\n    constructor(user: User)\r\n    {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo\r\n{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface FollowingStatus\r\n{\r\n    following: boolean;\r\n}\r\n\r\nexport type FollowingsPredicate = 'followers' | 'following';\r\n\r\nexport class ProfileFormValues\r\n{\r\n    displayName: string;\r\n    about?: string;\r\n\r\n    constructor(profile: Profile)\r\n    {\r\n        this.displayName = profile.displayName;\r\n        this.about = profile.about;\r\n    }\r\n}\r\n\r\nexport type ProfileActivitiesPredicate = 'hosting' | 'future' | 'past';","import {User, UserFormValues}                     from \"../models/user\";\r\nimport {makeAutoObservable, runInAction}          from \"mobx\";\r\nimport agent                                      from \"../agent/agent\";\r\nimport {store}                                    from \"./store\";\r\nimport {history}                                  from \"../../index\";\r\nimport {activitiesPath, homePagePath, vkOAuthUrl} from \"../../utils/paths\";\r\nimport {Profile}                                  from \"../models/profile\";\r\n\r\nexport default class UserStore\r\n{\r\n    private _user: User | null = null;\r\n    private _isLoadingVkLogin = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get isLoggedIn()\r\n    {\r\n        return !!this._user;\r\n    }\r\n\r\n    public get currentUserName()\r\n    {\r\n        return this._user?.userName;\r\n    }\r\n\r\n    public get currentImage()\r\n    {\r\n        return this._user?.image;\r\n    }\r\n\r\n    public get currentDisplayName()\r\n    {\r\n        return this._user?.displayName;\r\n    }\r\n    \r\n    public get isLoadingVkLogin()\r\n    {\r\n        return this._isLoadingVkLogin;\r\n    }\r\n\r\n    public getProfileWrapper = () =>\r\n    {\r\n        return this._user ? new Profile(this._user) : null;\r\n    }\r\n\r\n    public login = async (credentials: UserFormValues) =>\r\n    {\r\n        const user = await agent.Account.login(credentials);\r\n        store.commonStore.setToken(user.token);\r\n\r\n        runInAction(() => this._user = user);\r\n\r\n        history.push(activitiesPath);\r\n        store.modalStore.closeModal();\r\n    }\r\n\r\n    public logout = () =>\r\n    {\r\n        store.commonStore.setToken(null);\r\n        this._user = null;\r\n\r\n        history.push(homePagePath);\r\n    }\r\n\r\n    public register = async (registerValues: UserFormValues) =>\r\n    {\r\n        const user = await agent.Account.register(registerValues);\r\n        store.commonStore.setToken(user.token);\r\n\r\n        runInAction(() => this._user = user);\r\n\r\n        history.push(activitiesPath);\r\n        store.modalStore.closeModal();\r\n    }\r\n\r\n    public loadCurrentUser = async () =>\r\n    {\r\n        try\r\n        {\r\n            const user = await agent.Account.currentUser();\r\n            runInAction(() => this._user = user);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    public setCurrentUserMainImage = (image: string) =>\r\n    {\r\n        if (this._user)\r\n            this._user.image = image\r\n    }\r\n\r\n    public setDisplayName = (displayName: string) =>\r\n    {\r\n        if (this._user)\r\n            this._user.displayName = displayName;\r\n    }\r\n\r\n    public redirectToVkLogin = () =>\r\n    {\r\n        window.location.replace(vkOAuthUrl);\r\n    }\r\n\r\n    public vkLogin = async (accessToken: string, email: string) =>\r\n    {\r\n        this._isLoadingVkLogin = true;\r\n        try\r\n        {\r\n            const user = await agent.Account.vkLogin(accessToken, email);\r\n\r\n            runInAction(() => this._user = user);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            history.push(activitiesPath);\r\n        }\r\n        catch (e)\r\n        {\r\n            console.log(e)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isLoadingVkLogin = false)\r\n        }\r\n    }\r\n}","import {makeAutoObservable} from \"mobx\";\r\n\r\nexport default class ModalStore\r\n{\r\n    private _content: JSX.Element | null = null;\r\n    private _isOpen = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public openModal = (content: JSX.Element) =>\r\n    {\r\n        this._content = content;\r\n        this._isOpen = true;\r\n    }\r\n\r\n    public closeModal = () =>\r\n    {\r\n        this._content = null;\r\n        this._isOpen = false;\r\n    }\r\n\r\n    public get content()\r\n    {\r\n        return this._content;\r\n    }\r\n\r\n    public get isOpen()\r\n    {\r\n        return this._isOpen;\r\n    }\r\n}","export interface ChatComment\r\n{\r\n    id: number;\r\n    createdAt: Date;\r\n    body: string;\r\n    userName: string;\r\n    displayName: string;\r\n    image: string;\r\n}\r\n\r\nexport class ChatCommentFormValues\r\n{\r\n    body: string;\r\n    activityId: string;\r\n\r\n    constructor(body: string, activityId: string)\r\n    {\r\n        this.body = body\r\n        this.activityId = activityId;\r\n    }\r\n}","import {ChatComment, ChatCommentFormValues}            from \"../models/comment\";\r\nimport {makeAutoObservable, runInAction}               from \"mobx\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\nimport {store}      from \"./store\";\r\nimport {commentUrl} from \"../../utils/paths\";\r\n\r\nexport default class CommentStore\r\n{\r\n    private _comments: ChatComment[] = [];\r\n    private _hubConnection: HubConnection | null = null;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get comments()\r\n    {\r\n        return this._comments;\r\n    }\r\n\r\n    public createHubConnection = (activityId: string) =>\r\n    {\r\n        if (store.activityStore.hasActivity(activityId))\r\n        {\r\n            this._hubConnection = new HubConnectionBuilder()\r\n                .withUrl(commentUrl(activityId),\r\n                    {\r\n                        accessTokenFactory: () => store.commonStore.token!\r\n                    })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this._hubConnection.start()\r\n                .catch(error => console.log(\"Error establishing the connection: \", error))\r\n\r\n            this._hubConnection.on(\"LoadComments\", (comments: ChatComment[]) =>\r\n            {\r\n                runInAction(() =>\r\n                {\r\n                    comments.forEach(comment =>\r\n                    {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z'); //'Z' - to make date UTC\r\n                    })\r\n                    this._comments = comments\r\n                });\r\n            })\r\n\r\n            this._hubConnection.on(\"ReceiveComment\", (comment: ChatComment) =>\r\n            {\r\n                runInAction(() =>\r\n                {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this._comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    public stopHubConnection = () =>\r\n    {\r\n        this._hubConnection?.stop()\r\n            .catch(error => console.log(\"Error stopping connection: \", error));\r\n    }\r\n\r\n    public clearComments = () =>\r\n    {\r\n        this._comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    public addComment = async (body: string) =>\r\n    {\r\n        const activityId = store.activityStore.selectedActivity?.id;\r\n        const comment = new ChatCommentFormValues(body, activityId!);\r\n\r\n        try\r\n        {\r\n            await this._hubConnection?.invoke('SendComment', comment);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import ActivitiesStore             from \"./activityStore\";\r\nimport {createContext, useContext} from \"react\";\r\nimport CommonStore                 from \"./commonStore\";\r\nimport UserStore                   from \"./userStore\";\r\nimport ModalStore                  from \"./modalStore\";\r\nimport ProfileStore                from \"./profileStore\";\r\nimport CommentStore                from \"./commentStore\";\r\n\r\ninterface Store\r\n{\r\n    activityStore: ActivitiesStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivitiesStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore()\r\n{\r\n    return useContext(StoreContext);\r\n}","import React                                                from \"react\";\r\nimport {Button, Container, Dropdown, Image, Menu, MenuItem} from \"semantic-ui-react\";\r\nimport {Link, NavLink}                                      from \"react-router-dom\";\r\nimport {observer}                                           from \"mobx-react-lite\";\r\nimport {useStore} from \"../stores/store\";\r\nimport {\r\n    activitiesPath,\r\n    createActivityPath,\r\n    errorsPath, homePagePath,\r\n    logoPath,\r\n    profileImagePlaceholder,\r\n    profilePath\r\n}                 from \"../../utils/paths\";\r\n\r\nexport default observer(function NavBar()\r\n{\r\n    const {userStore} = useStore();\r\n    const {logout, currentUserName, currentImage, currentDisplayName} = userStore;\r\n\r\n    return (\r\n        <Menu inverted fixed={\"top\"}>\r\n            <Container>\r\n                <MenuItem as={NavLink} exact to={homePagePath} header>\r\n                    <img src={logoPath} alt={\"logo\"}/>\r\n                    Reactivities\r\n                </MenuItem>\r\n                <MenuItem as={NavLink} to={activitiesPath} name=\"Activities\"/>\r\n                <MenuItem as={NavLink} to={errorsPath} name=\"Errors\"/>\r\n                <MenuItem>\r\n                    <Button as={NavLink} to={createActivityPath} content=\"Create Activity\" positive/>\r\n                </MenuItem>\r\n                <MenuItem position={\"right\"}>\r\n                    <Image src={currentImage || profileImagePlaceholder} avatar spaced={\"right\"} />\r\n                    <Dropdown pointing={'top left'} text={currentDisplayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link}\r\n                                           to={profilePath(currentUserName || \"unknown\")}\r\n                                           content={'My profile'}\r\n                                           icon={'user'} />\r\n                            <Dropdown.Item onClick={logout}\r\n                                           content={'Logout'}\r\n                                           icon={'power'} />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, {SyntheticEvent} from \"react\";\r\nimport {Profile}               from \"../../../app/models/profile\";\r\nimport {observer}              from \"mobx-react-lite\";\r\nimport {Button, Reveal}        from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props)\r\n{\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, isLoading} = profileStore;\r\n\r\n    function handleFollow(event: SyntheticEvent, userName: string)\r\n    {\r\n        event.preventDefault();\r\n        updateFollowing(userName);\r\n    }\r\n\r\n    if(profile.userName === userStore.currentUserName)\r\n        return null;\r\n\r\n    return (\r\n        <Reveal animated={'move'}>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    color={'teal'}\r\n                    content={profile.following ? 'Following' : 'Not following'}/>\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button onClick={(event) => handleFollow(event, profile.userName)}\r\n                        fluid\r\n                        basic\r\n                        color={profile.following ? 'red' : \"green\"}\r\n                        content={profile.following ? 'Unfollow' : 'Follow'}\r\n                        loading={isLoading}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React                                  from \"react\";\r\nimport {Profile}                              from \"../../app/models/profile\";\r\nimport {Card, Icon, Image}                    from \"semantic-ui-react\";\r\nimport {Link}                                 from \"react-router-dom\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../utils/paths\";\r\nimport FollowButton                           from \"./followings/FollowButton\";\r\nimport {observer}                             from \"mobx-react-lite\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    aboutLength?: number;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile, aboutLength = 40}: Props)\r\n{\r\n    function truncate(text: string | undefined)\r\n    {\r\n        if(text)\r\n        {\r\n            return text.length > aboutLength ? text.substring(0, aboutLength - 3) + '...' : text;\r\n        }\r\n    }\r\n\r\n    const aboutContent = profile.about ? truncate(profile.about) : `Hello, I am ${profile.displayName}`\r\n\r\n    return (\r\n        <Card as={Link} to={profilePath(profile.userName)}>\r\n            <Image src={profile.image || profileImagePlaceholder}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{aboutContent}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name={\"user\"}/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import React                                  from 'react';\r\nimport {observer}                             from \"mobx-react-lite\";\r\nimport {List, Image, Popup}                   from \"semantic-ui-react\";\r\nimport {Profile}                              from \"../../../app/models/profile\";\r\nimport {Link}                                 from \"react-router-dom\";\r\nimport ProfileCard                            from \"../../profiles/ProfileCard\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    attendees: Profile[];\r\n}\r\n\r\nconst followingImageStyles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 3\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendees({attendees}: Props)\r\n{\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee =>\r\n                (\r\n                    <Popup key={attendee.userName}\r\n                           hoverable\r\n                           trigger={\r\n                               <List.Item key={attendee.userName} as={Link} to={profilePath(attendee.userName)}>\r\n                                   <Image src={attendee.image || profileImagePlaceholder}\r\n                                          size={\"mini\"}\r\n                                          circular\r\n                                          bordered\r\n                                          style={attendee.following ? followingImageStyles : null}\r\n                                   />\r\n                               </List.Item>\r\n                           }\r\n                    >\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup>\r\n                ))}\r\n        </List>\r\n    )\r\n})","import React                                from \"react\";\r\nimport {Segment, Item, Icon, Button, Label} from \"semantic-ui-react\";\r\nimport {Link}                               from \"react-router-dom\";\r\nimport {Activity}                           from \"../../../app/models/activity\";\r\nimport {formatDate}                         from \"../../../utils/date-fns-utils\";\r\nimport ActivityListItemAttendees                            from \"./ActivityListItemAttendees\";\r\nimport {activityPath, profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props)\r\n{\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached={'top'}\r\n                           color={'red'}\r\n                           content={'Cancelled'}\r\n                           style={{textAlign: 'center'}}\r\n                    />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image src={activity.host?.image || profileImagePlaceholder}\r\n                                    as={Link}\r\n                                    to={profilePath(activity.hostUserName)}\r\n                                    size={\"tiny\"}\r\n                                    circular\r\n                                    style={{marginBottom: 3}}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={activityPath(activity.id)}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={profilePath(activity.hostUserName)}>\r\n                                {activity.host?.displayName}\r\n                            </Link>\r\n                            </Item.Description>\r\n                            {activity.isHosting &&\r\n                                (\r\n                                    <Item.Description>\r\n                                        <Label basic color={\"orange\"}>\r\n                                            You are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )\r\n                            }\r\n                            {activity.isGoing && !activity.isHosting &&\r\n                                (\r\n                                    <Item.Description>\r\n                                        <Label basic color={\"green\"}>\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name={\"clock\"}/> <span style={{marginRight: \"1em\"}}>{formatDate(activity.date, \"dd MMM yyyy hh:mm\")}</span>\r\n                <Icon name={\"marker\"}/>{activity.venue}\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendees attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={activityPath(activity.id)}\r\n                        color={\"teal\"}\r\n                        floated={\"right\"}\r\n                        content={\"View\"}\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, {Fragment}       from \"react\";\r\nimport {Header} from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\nimport {observer}              from \"mobx-react-lite\"\r\nimport ActivityListItem        from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList()\r\n    {\r\n        const {activityStore} = useStore();\r\n        const {groupedActivities} = activityStore;\r\n\r\n        return (\r\n            <>\r\n                {groupedActivities.map(([date, activities]) =>\r\n                    (\r\n                        <Fragment key={date}>\r\n                            <Header sub color={'teal'}>{date}</Header>\r\n                            {activities.map((activity) =>\r\n                                (\r\n                                    <ActivityListItem key={activity.id} activity={activity}/>\r\n                                ))}\r\n                        </Fragment>\r\n                    )\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n)","import React          from \"react\";\r\nimport Calendar       from \"react-calendar\";\r\nimport {Header, Menu} from \"semantic-ui-react\";\r\nimport {observer}     from \"mobx-react-lite\";\r\nimport {useStore}     from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {predicates, setPredicate} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size={'large'} style={{width: '100%', marginTop: '1.8em'}}>\r\n                <Header content={'Filters'} icon={'filter'} color={'teal'} attached/>\r\n                <Menu.Item\r\n                    content={'All Activities'}\r\n                    active={predicates.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content={\"I'm going\"}\r\n                    active={predicates.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content={\"I'm hosting\"}\r\n                    active={predicates.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicates.get('startDate')}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Grid, GridColumn, Loader}   from \"semantic-ui-react\";\r\nimport ActivityList                 from \"./ActivityList\";\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport ActivityFilters              from \"./ActivityFilters\";\r\nimport {PagingParams}               from \"../../../app/models/pagination\";\r\nimport InfiniteScroll               from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder  from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {activitiesByDate, loadActivities,\r\n        setPagingParams, pagination,\r\n        isLoadingInitial} = activityStore\r\n    const [isLoadingNextActivities, setIsLoadingNextActivities] = useState(false);\r\n\r\n    useEffect(() =>\r\n    {\r\n        if(activitiesByDate.length <= 1)\r\n        {\r\n            loadActivities()\r\n        }\r\n    }, [loadActivities, activitiesByDate.length]);\r\n\r\n    function getNextActivities()\r\n    {\r\n        if(pagination)\r\n        {\r\n            setIsLoadingNextActivities(true);\r\n            setPagingParams(new PagingParams(pagination.currentPage + 1))\r\n            loadActivities().then(() => setIsLoadingNextActivities(false));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={'10'}>\r\n                {isLoadingInitial && !isLoadingNextActivities ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={getNextActivities}\r\n                        hasMore={!isLoadingNextActivities\r\n                            && !!pagination\r\n                            && pagination.currentPage < pagination.totalPagesCount}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList/>\r\n                    </InfiniteScroll>\r\n                )}\r\n            </GridColumn>\r\n            <GridColumn width={'6'}>\r\n                <ActivityFilters />\r\n            </GridColumn>\r\n            <Grid.Column width={10}>\r\n                <Loader active={isLoadingNextActivities} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextInput(props: Props)\r\n{\r\n    const [field, meta] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import {ErrorMessage, Form, Formik} from \"formik\";\r\nimport React                                                     from \"react\";\r\nimport TextInput               from \"../../app/common/form/TextInput\";\r\nimport {Button, Header, Label} from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../app/stores/store\";\r\nimport {observer}                                  from \"mobx-react-lite\";\r\n\r\nexport default observer(function LoginForm()\r\n{\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.login(values)\r\n                        .catch(error => setErrors({error: \"Invalid email or password\"}))\r\n            }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className={\"ui form\"} onSubmit={handleSubmit} autoComplete={\"off\"}>\r\n                    <Header as='h2' content={\"Login to Reactivities\"} color={\"teal\"} textAlign={\"center\"}/>\r\n                    <TextInput placeholder={\"Email\"} name={\"email\"} />\r\n                    <TextInput placeholder={\"Password\"} name={\"password\"} type={\"password\"} />\r\n                    <ErrorMessage name={'error'} render={() =>\r\n                        (\r\n                        <Label style={{marginBottom: 10}} basic color={\"red\"} content={errors.error} />\r\n                    )} />\r\n                    <Button content={\"Login\"} type={\"submit\"} positive fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React     from \"react\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    errors: any;//string[];\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props)\r\n{\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((error: string, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {error}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n","import {ErrorMessage, Form, Formik} from \"formik\";\r\nimport React                        from \"react\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport {useStore}                   from \"../../app/stores/store\";\r\nimport {Button, Header}      from \"semantic-ui-react\";\r\nimport TextInput                    from \"../../app/common/form/TextInput\";\r\nimport * as Yup                     from \"yup\";\r\nimport ValidationErrors             from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm()\r\n{\r\n    const {userStore} = useStore();\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        userName: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: \"\", userName: \"\", email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.register(values)\r\n                    .catch(error => setErrors({error}))\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className={\"ui form error\"} onSubmit={handleSubmit} autoComplete={\"off\"}>\r\n                    <Header as='h2' content={\"Register to Reactivities\"} color={\"teal\"} textAlign={\"center\"}/>\r\n                    <TextInput placeholder={\"Display Name\"} name={\"displayName\"} />\r\n                    <TextInput placeholder={\"Username\"} name={\"userName\"} />\r\n                    <TextInput placeholder={\"Email\"} name={\"email\"} />\r\n                    <TextInput placeholder={\"Password\"} name={\"password\"} type={\"password\"} />\r\n                    <ErrorMessage name={'error'} render={() =>\r\n                        (\r\n                            <ValidationErrors errors={errors.error} />\r\n                        )} />\r\n                    <Button content={\"Register\"}\r\n                            type={\"submit\"}\r\n                            disabled={!isValid || !dirty || isSubmitting}\r\n                            positive fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React                                                from \"react\";\r\nimport {Link}                                               from \"react-router-dom\";\r\nimport {Button, Container, Divider, Header, Image, Segment} from \"semantic-ui-react\";\r\nimport {useStore}                                           from \"../../app/stores/store\";\r\nimport {observer}                                           from \"mobx-react-lite\";\r\nimport LoginForm                                            from \"../user/LoginForm\";\r\nimport RegisterForm                                         from \"../user/RegisterForm\";\r\nimport {activitiesPath, logoPath}                           from \"../../utils/paths\";\r\n\r\nexport default observer(function HomePage()\r\n{\r\n    const {\r\n        userStore,\r\n        modalStore\r\n    } = useStore();\r\n    \r\n    return (\r\n        <Segment inverted vertical textAlign={'center'} className='masthead'>\r\n            <Container text>\r\n                <Header as={'h1'} inverted>\r\n                    <Image src={logoPath} alt={'logo'} size={'massive'} style={{marginBottom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn\r\n                    ? (\r\n                        <>\r\n                            <Header as={'h2'} inverted content={'Welcome to Reactivities'}/>\r\n                            <Button as={Link}\r\n                                    to={activitiesPath}\r\n                                    size={'huge'}\r\n                                    inverted>\r\n                                Go to activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm/>)}\r\n                                    size={'huge'}\r\n                                    inverted\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm/>)}\r\n                                    size={'huge'}\r\n                                    inverted\r\n                            >\r\n                                Register\r\n                            </Button>\r\n\r\n                            <Divider horizontal inverted>Or</Divider>\r\n\r\n                            <Button onClick={userStore.redirectToVkLogin}\r\n                                    content={\"VK\"}\r\n                                    color={\"facebook\"}\r\n                            />\r\n                        </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import {Profile} from \"./profile\";\r\n\r\nexport interface Activity\r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    attendees: Profile[];\r\n\r\n    //extra fields\r\n    isGoing: boolean;\r\n    isHosting: boolean;\r\n    host?: Profile;\r\n}\r\n\r\nexport class ActivityFormValues\r\n{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    category: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: Activity)\r\n    {\r\n        if(activity)\r\n        {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.date = activity.date;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n\r\n    public toActivity()\r\n    {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            date: this.date,\r\n            description: this.description,\r\n            category: this.category,\r\n            city: this.city,\r\n            venue: this.venue\r\n        } as Activity;\r\n    }\r\n}\r\n\r\nexport interface ProfileActivity\r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date;\r\n    category: string;\r\n}","import React from \"react\";\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\ninterface Properties\r\n{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Properties)\r\n{\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextAreaInput(props: Props)\r\n{\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React      from \"react\";\r\nimport {useField}            from \"formik\";\r\nimport {Form, Label, Select} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    options: any[];\r\n    label?: string;\r\n}\r\n\r\nexport default function SelectInput(props: Props)\r\n{\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select clearable\r\n                    options={props.options}\r\n                    value={field.value || null}\r\n                    onChange={(event, data) => helpers.setValue(data.value)}\r\n                    onBlur={() => helpers.setTouched(true)}\r\n                    placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {\r\n        text: 'Culture',\r\n        value: 'culture'\r\n    },\r\n    {\r\n        text: 'Film',\r\n        value: 'film'\r\n    },\r\n    {\r\n        text: 'Food',\r\n        value: 'food'\r\n    },\r\n    {\r\n        text: 'Meeting',\r\n        value: 'meeting'\r\n    },\r\n    {\r\n        text: 'Music',\r\n        value: 'music'\r\n    },\r\n    {\r\n        text: 'Travel',\r\n        value: 'travel'\r\n    },\r\n]","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label}   from \"semantic-ui-react\";\r\nimport ReactDatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\ninterface Props extends Partial<ReactDatePickerProps>\r\n{\r\n    placeholderText: string;\r\n    name: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function DateInput(props: Props)\r\n{\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <ReactDatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(value) => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Button, Header}  from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    confirmCallback: () => void;\r\n    cancelCallback: () => void;\r\n    headerContent?: string;\r\n}\r\n\r\nexport default function ConfirmModal({confirmCallback, cancelCallback, headerContent}: Props)\r\n{\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    function handleConfirm()\r\n    {\r\n        setConfirmLoading(true);\r\n        confirmCallback();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header content={headerContent || 'Are you sure?'}\r\n                    as={'h2'}\r\n                    color={'teal'}\r\n                    style={{textAlign: 'center', marginBottom: '1em'}}\r\n            />\r\n            <div style={{display:'flex', justifyContent: 'center', width: '100%'}}>\r\n                <Button onClick={handleConfirm}\r\n                        icon={'check'}\r\n                        color={'green'}\r\n                        basic\r\n                        loading={confirmLoading}\r\n                        style={{padding: '1em 2em'}}\r\n                />\r\n                <Button onClick={cancelCallback}\r\n                        icon={'cancel'}\r\n                        color={'red'}\r\n                        basic\r\n                        style={{padding: '1em 2em'}}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Header, Segment}    from \"semantic-ui-react\";\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\nimport {observer}                     from \"mobx-react-lite\";\r\nimport {ActivityFormValues}          from \"../../../app/models/activity\";\r\nimport {useParams, useHistory, Link}  from \"react-router-dom\";\r\nimport LoadingComponent               from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid}                   from \"uuid\";\r\nimport {Formik, Form}                 from \"formik\";\r\nimport * as Yup                       from \"yup\"\r\nimport TextInput                      from \"../../../app/common/form/TextInput\"\r\nimport TextAreaInput                  from \"../../../app/common/form/TextAreaInput\";\r\nimport SelectInput                    from \"../../../app/common/form/SelectInput\";\r\nimport {categoryOptions}              from \"../../../app/common/options/—ÅategoryOptions\";\r\nimport DateInput                      from \"../../../app/common/form/DateInput\";\r\nimport {activitiesPath, activityPath} from \"../../../utils/paths\";\r\nimport ConfirmModal                   from \"../../../app/common/modal/ConfirmModal\";\r\n\r\nexport default observer(function ActivityForm()\r\n{\r\n    const { activityStore, modalStore } = useStore();\r\n    const {loadActivity, deleteActivity, selectedActivity} = activityStore;\r\n    const {id} = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        date: Yup.string().required(),\r\n        category: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (id)\r\n        {\r\n            loadActivity(id)\r\n                .then(activity => setActivity(new ActivityFormValues(activity)))\r\n        }\r\n    }, [id, loadActivity])\r\n\r\n    async function handleFormSubmit(activity: ActivityFormValues)\r\n    {\r\n        if (!activity.id)\r\n        {\r\n            //create activity\r\n            activity.id = uuid();\r\n            await activityStore.createActivity(activity);\r\n        }\r\n        else\r\n        {\r\n            //update activity\r\n            await activityStore.editActivity(activity);\r\n        }\r\n\r\n        history.push(activityPath(activity.id));\r\n    }\r\n\r\n    function onDeleteClick()\r\n    {\r\n        modalStore.openModal(\r\n            <ConfirmModal\r\n                headerContent={\"Are you sure you want to delete this activity?\"}\r\n                confirmCallback={handleDeleteActivity}\r\n                cancelCallback={modalStore.closeModal}\r\n            />\r\n        )\r\n    }\r\n\r\n    function handleDeleteActivity()\r\n    {\r\n        deleteActivity(selectedActivity!.id)\r\n            .then(() => {\r\n                modalStore.closeModal();\r\n                history.push(activitiesPath);\r\n            })\r\n    }\r\n\r\n    if (activityStore.isLoadingInitial)\r\n        return <LoadingComponent content={'Loading activity...'}/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik validationSchema={validationSchema}\r\n                    enableReinitialize\r\n                    initialValues={activity}\r\n                    onSubmit={handleFormSubmit}>\r\n                {({\r\n                      handleSubmit, isSubmitting, dirty, isValid\r\n                  }) =>\r\n                    (\r\n                        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete={'off'}>\r\n                            <Header content={\"Activity Details\"} sub color={\"teal\"}/>\r\n                            <TextInput placeholder={\"Title\"}\r\n                                       name={\"title\"}\r\n                            />\r\n                            <TextAreaInput placeholder={\"Description of the activity\"}\r\n                                           name={\"description\"}\r\n                                           rows={3}\r\n                            />\r\n                            <SelectInput placeholder={'Category'}\r\n                                         name={\"category\"}\r\n                                         options={categoryOptions}\r\n                            />\r\n                            <DateInput placeholderText={\"Date\"}\r\n                                       name={\"date\"}\r\n                                       showTimeSelect\r\n                                       timeCaption={\"time\"}\r\n                                       dateFormat={\"MMMM d, yyyy hh:mm\"}\r\n                            />\r\n\r\n                            <Header content={\"Location Details\"} sub color={\"teal\"}/>\r\n                            <TextInput placeholder={\"City\"}\r\n                                       name={\"city\"}\r\n                            />\r\n                            <TextInput placeholder={\"Venue\"}\r\n                                       name={\"venue\"}\r\n                            />\r\n                            {id &&\r\n                                <Button onClick={onDeleteClick}\r\n                                        type={'button'}\r\n                                        floated={'right'}\r\n                                        icon={'trash'}\r\n                                        basic\r\n                                        disabled={isSubmitting}\r\n                                        color={'red'}\r\n                                />\r\n                            }\r\n                            <Button type={'submit'}\r\n                                    content={'Submit'}\r\n                                    positive\r\n                                    floated={\"left\"}\r\n                                    loading={isSubmitting}\r\n                                    disabled={isSubmitting || !dirty || !isValid} />\r\n                            <Button as={Link}\r\n                                    to={activitiesPath}\r\n                                    floated={'left'}\r\n                                    type={'button'}\r\n                                    content='Cancel'\r\n                                    disabled={isSubmitting}/>\r\n                        </Form>\r\n                    )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import {observer}                                           from 'mobx-react-lite';\r\nimport React                                                from 'react'\r\nimport {Button, Header, Item, Segment, Image, Label}        from 'semantic-ui-react'\r\nimport {Activity}                                           from \"../../../app/models/activity\";\r\nimport {Link}                                               from \"react-router-dom\";\r\nimport {formatDate}                                         from \"../../../utils/date-fns-utils\";\r\nimport {useStore}                                           from \"../../../app/stores/store\";\r\nimport {categoryImagePath, manageActivityPath, profilePath} from \"../../../utils/paths\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props\r\n{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props)\r\n{\r\n    const {activityStore} = useStore();\r\n    const {\r\n        updateAttendance, isLoading,\r\n        cancelSelectedActivityToggle\r\n    } = activityStore\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                           ribbon\r\n                           color={\"red\"}\r\n                           content={\"Cancelled\"}\r\n                    />\r\n                }\r\n\r\n                <Image src={categoryImagePath(`${activity.category}.jpg`)} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{formatDate(activity.date, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                    <Link to={profilePath(activity.hostUserName)}>\r\n                                        {activity.host?.displayName}\r\n                                    </Link>\r\n                                </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHosting ? (\r\n                    <>\r\n                        <Button onClick={cancelSelectedActivityToggle}\r\n                                color={activity.isCancelled ? \"green\" : \"red\"}\r\n                                floated={\"left\"}\r\n                                basic\r\n                                loading={isLoading}\r\n                        >\r\n                            {activity.isCancelled ? \"Re-activate activity\" : \"Cancel activity\"}\r\n                        </Button>\r\n                        <Button as={Link}\r\n                                to={manageActivityPath(activity.id)}\r\n                                disabled={activity.isCancelled}\r\n                                color='orange'\r\n                                floated='right'\r\n                                content={'Manage Event'}\r\n                        />\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={isLoading}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button onClick={updateAttendance}\r\n                            loading={isLoading}\r\n                            color='teal'\r\n                            disabled={activity.isCancelled}\r\n                    >\r\n                        Join Activity\r\n                    </Button>\r\n                )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import {observer}            from 'mobx-react-lite';\r\nimport React                 from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity}   from \"../../../app/models/activity\";\r\nimport {formatDate} from \"../../../utils/date-fns-utils\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props)\r\n{\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {formatDate(activity.date, \"dd MMM yyyy hh:mm\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import {observer}                                 from 'mobx-react-lite'\r\nimport React, {useEffect}                         from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport {profileImagePlaceholder, profilePath}     from \"../../../utils/paths\";\r\nimport {useStore}                                 from \"../../../app/stores/store\";\r\nimport {Link}                                     from \"react-router-dom\";\r\nimport {Formik, Form, Field, FieldProps}          from 'formik';\r\nimport * as Yup                                   from 'yup';\r\nimport {formatDistanceToNow}                      from \"date-fns\";\r\n\r\ninterface Props\r\n{\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props)\r\n{\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (activityId)\r\n        {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () =>\r\n        {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    <Formik initialValues={{body: ''}}\r\n                            onSubmit={(values, {resetForm}) => commentStore.addComment(values.body)\r\n                                .then(() => resetForm())}\r\n                            validationSchema={Yup.object({\r\n                                body: Yup.string().required()\r\n                            })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) =>\r\n                            (\r\n                                <Form className={'ui form'}>\r\n                                    <Field name={'body'}>\r\n                                        {(props: FieldProps) =>\r\n                                            (\r\n                                                <div style={{position: 'relative'}}>\r\n                                                    <Loader active={isSubmitting} />\r\n                                                    <textarea\r\n                                                        placeholder={'Enter your comment'}\r\n                                                        rows={2}\r\n                                                        {...props.field}\r\n                                                        onKeyPress={event =>\r\n                                                        {\r\n                                                            if(event.key === 'Enter' && event.shiftKey)\r\n                                                                return;\r\n\r\n                                                            if(event.key === 'Enter' && !event.shiftKey)\r\n                                                            {\r\n                                                                event.preventDefault();\r\n\r\n                                                                if(isValid)\r\n                                                                    handleSubmit();\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            )}\r\n                                    </Field>\r\n                                </Form>\r\n                            )}\r\n                    </Formik>\r\n\r\n                    {commentStore.comments.map(comment =>\r\n                        (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || profileImagePlaceholder}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={profilePath(comment.userName)}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import React                               from 'react'\r\nimport {Segment, List, Label, Item, Image} from 'semantic-ui-react'\r\nimport {Link}                              from 'react-router-dom'\r\nimport {observer}                          from 'mobx-react-lite'\r\nimport {Activity}                             from \"../../../app/models/activity\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({activity: {attendees, host}}: Props)\r\n{\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{border: 'none'}}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>\r\n                        (\r\n                            <Item key={attendee.userName} style={{position: 'relative'}}>\r\n                                {attendee.userName === host?.userName &&\r\n                                    <Label\r\n                                        style={{position: 'absolute'}}\r\n                                        color='orange'\r\n                                        ribbon='right'\r\n                                    >\r\n                                        Host\r\n                                    </Label>\r\n                                }\r\n\r\n                                <Image size='tiny' src={attendee.image || profileImagePlaceholder}/>\r\n                                <Item.Content verticalAlign='middle'>\r\n                                    <Item.Header as='h3'>\r\n                                        <Link to={profilePath(attendee.userName)}>{attendee.displayName}</Link>\r\n                                    </Item.Header>\r\n                                    {attendee.following &&\r\n                                        <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\r\n                                    }\r\n                                </Item.Content>\r\n                            </Item>\r\n                        ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import React, {useEffect}      from \"react\";\r\nimport {Grid}                  from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\nimport LoadingComponent        from \"../../../app/layout/LoadingComponent\";\r\nimport {useParams}             from 'react-router-dom';\r\nimport {observer}              from \"mobx-react-lite\";\r\nimport ActivityDetailedHeader  from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo    from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat    from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails()\r\n{\r\n    const { activityStore } = useStore();\r\n    const {selectedActivity: activity} = activityStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (id)\r\n            activityStore.loadActivity(id)\r\n\r\n        return () => activityStore.clearSelectedActivity();\r\n    }, [id, activityStore])\r\n\r\n    if (activityStore.isLoadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'10'}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={'6'}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, {useState}         from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios                     from 'axios';\r\nimport ValidationErrors from \"./ValidationErrors\";\r\nimport {apiBaseUrl}     from \"../../utils/paths\";\r\n\r\nexport default function TestErrors()\r\n{\r\n    const baseUrl = apiBaseUrl;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound()\r\n    {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest()\r\n    {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError()\r\n    {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised()\r\n    {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid()\r\n    {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError()\r\n    {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component'/>\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary/>\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary/>\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary/>\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary/>\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary/>\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary/>\r\n                </Button.Group>\r\n                {errors &&\r\n                    <ValidationErrors errors={errors}/>\r\n                }\r\n            </Segment>\r\n        </>\r\n    )\r\n}\r\n","import React                           from \"react\";\r\nimport {Button, Header, Icon, Segment} from \"semantic-ui-react\";\r\nimport {Link}           from \"react-router-dom\";\r\nimport {activitiesPath} from \"../../utils/paths\";\r\n\r\nexport default function NotFound()\r\n{\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name={'search'} />\r\n                Oops, we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to={activitiesPath} primary>\r\n                    Go to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React                        from \"react\";\r\nimport {useStore}                   from \"../../app/stores/store\";\r\nimport {Container, Header, Segment} from \"semantic-ui-react\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\n\r\nexport default observer(function ServerError()\r\n{\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h2' content={'Server Error'}/>\r\n            <Header sub as={'h3'} content={commonStore.error?.message} color={'red'}/>\r\n            {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header sub as={'h4'} content={'Stack Trace'} color={'teal'} style={{marginBottom: '10px'}} />\r\n                <code>{commonStore.error.details}</code>\r\n            </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React      from \"react\";\r\nimport {useStore} from \"../../stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Modal}    from \"semantic-ui-react\";\r\n\r\nexport default observer(function ModalContainer()\r\n{\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.isOpen} onClose={modalStore.closeModal} size={\"mini\"}>\r\n            <Modal.Content>\r\n                {modalStore.content}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React                                                             from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic} from \"semantic-ui-react\";\r\nimport {profileImagePlaceholder}                          from \"../../../utils/paths\";\r\nimport {observer}                                         from \"mobx-react-lite\";\r\nimport {Profile}    from \"../../../app/models/profile\";\r\nimport FollowButton from \"../followings/FollowButton\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    isCurrentUser: boolean;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props)\r\n{\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={'12'}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image src={profile.image || profileImagePlaceholder} size={'small'} avatar/>\r\n                            <Item.Content verticalAlign={'middle'}>\r\n                                <Header as={'h1'} content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={'4'}>\r\n                    <Statistic.Group widths={'2'}>\r\n                        <Statistic label={'Followers'} value={profile.followersCount}/>\r\n                        <Statistic label={'Following'} value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n\r\n                    <Divider/>\r\n\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone}  from 'react-dropzone'\r\nimport {Header, Icon} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    setFiles: (files: any[]) => void;\r\n}\r\n\r\nconst zoneStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n}\r\n\r\nconst zoneActive = {\r\n    borderColor: 'green'\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props)\r\n{\r\n    const onDrop = useCallback(acceptedFiles =>\r\n    {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(File, {\r\n            preview: URL.createObjectURL(file)\r\n        })));\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...zoneStyles, ...zoneActive} : zoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name={'upload'} size={'huge'} />\r\n            <Header content={'Drop image here'} />\r\n        </div>\r\n    )\r\n}","import React     from \"react\";\r\nimport 'cropperjs/dist/cropper.css'\r\nimport {Cropper} from \"react-cropper\";\r\n\r\ninterface Props\r\n{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props)\r\n{\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode={'move'}\r\n            autoCropArea={1}\r\n            modal={false}\r\n            background={false}\r\n            zoomOnWheel={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useEffect, useState}  from \"react\";\r\nimport {Button, Grid, Header} from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone           from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper    from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props\r\n{\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props)\r\n{\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop()\r\n    {\r\n        if(cropper)\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        return () =>{\r\n            files.forEach((file: any) => URL.revokeObjectURL(file));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 1 - Upload photo'}/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={'1'}/>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 2 - Resize image'}/>\r\n                {files.length > 0 &&\r\n                    (\r\n                        <PhotoWidgetCropper imagePreview={files[0].preview} setCropper={setCropper} />\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'1'}/>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 1 - Preview upload'}/>\r\n                {files.length > 0 &&\r\n                <>\r\n                    <div className={'img-preview'} style={{minHeight: 182, overflow: \"hidden\"}} />\r\n                    <Button.Group widths={2} attached={'bottom'}>\r\n                        <Button onClick={onCrop}\r\n                                loading={loading}\r\n                                disabled={loading}\r\n                                icon={\"check\"}\r\n                                positive />\r\n                        <Button onClick={() => setFiles([])}\r\n                                disabled={loading}\r\n                                icon={\"close\"} />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React, {SyntheticEvent, useState}   from \"react\";\r\nimport {observer}                          from \"mobx-react-lite\";\r\nimport {Card, Header, Image, Grid, Button} from \"semantic-ui-react\";\r\nimport {Photo}                             from \"../../../app/models/profile\";\r\nimport {useStore}                          from \"../../../app/stores/store\";\r\nimport PhotoUploadWidget                   from \"../../../app/common/imageUploader/PhotoUploadWidget\";\r\nimport NotFound                            from \"../../errors/NotFound\";\r\n\r\nexport default observer(function ProfilePhotos()\r\n{\r\n    const [inAddPhotoMode, setInAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | null>(null);\r\n\r\n    const {profileStore} = useStore();\r\n    const {\r\n        profile, isCurrentUser,\r\n        uploadPhoto, isUploading,\r\n        setMainImage, isLoading,\r\n        deleteImage\r\n    } = profileStore;\r\n\r\n    if(!profile)\r\n        return <NotFound />\r\n\r\n    function handlePhotoUpload(file: Blob)\r\n    {\r\n        uploadPhoto(file).then(() => setInAddPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        if (target)\r\n            return;\r\n\r\n        setTarget(event.currentTarget.name);\r\n        setMainImage(photo).then(() => setTarget(null));\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        if (target)\r\n            return;\r\n\r\n        setTarget(event.currentTarget.name);\r\n        deleteImage(photo).then(() => setTarget(null))\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                <Header icon={'image'} content={'Photos'} floated={'left'}/>\r\n                {isCurrentUser &&\r\n                    <Button floated={'right'} basic\r\n                            content={inAddPhotoMode ? 'Cancel' : 'Add photo'}\r\n                            onClick={() => setInAddPhotoMode(!inAddPhotoMode)}\r\n                    />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'16'}>\r\n                {inAddPhotoMode ? (\r\n                    <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={isUploading}/>\r\n                ) : (\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map(photo =>\r\n                            (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser &&\r\n                                        <Button.Group widths={2} attached={'bottom'} fluid>\r\n                                            <Button onClick={(event) => handleSetMainPhoto(photo, event)}\r\n                                                    content={\"Main\"}\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={isLoading && target === 'main' + photo.id}\r\n                                                    basic\r\n                                                    color={\"green\"}\r\n                                                    style={{zIndex: 1}}\r\n                                            />\r\n                                            <Button onClick={(event) => handleDeletePhoto(photo, event)}\r\n                                                    icon={'trash'}\r\n                                                    name={photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={isLoading && target === photo.id}\r\n                                                    basic\r\n                                                    color={'grey'}\r\n                                            />\r\n                                        </Button.Group>}\r\n                                </Card>\r\n                            ))}\r\n                    </Card.Group>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import {Form, Formik}               from \"formik\";\r\nimport React                        from \"react\";\r\nimport {Profile, ProfileFormValues} from \"../../../app/models/profile\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport TextInput                    from \"../../../app/common/form/TextInput\";\r\nimport TextAreaInput                from \"../../../app/common/form/TextAreaInput\";\r\nimport {Button}                     from \"semantic-ui-react\";\r\nimport * as Yup                     from 'yup';\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    onSubmitted?: () => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({profile, onSubmitted}: Props)\r\n{\r\n    const {profileStore} = useStore();\r\n    const {updateProfile} = profileStore;\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('Display name is required')\r\n    })\r\n\r\n    function handleSubmit(profile: ProfileFormValues)\r\n    {\r\n        updateProfile(profile).then(onSubmitted)\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={{displayName: profile.displayName, about: profile.about}}\r\n                validationSchema={validationSchema}\r\n                onSubmit={handleSubmit}>\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className={'ui form'}>\r\n                    <TextInput placeholder={'DisplayName'} name={'displayName'}/>\r\n                    <TextAreaInput placeholder={'About me'} name={'about'} rows={5}/>\r\n                    <Button\r\n                        type={'submit'}\r\n                        content={'Update profile'}\r\n                        floated={'right'}\r\n                        positive\r\n                        loading={isSubmitting}\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState}      from \"react\";\r\nimport {observer}             from \"mobx-react-lite\";\r\nimport {Button, Grid, Header} from \"semantic-ui-react\";\r\nimport {useStore}       from \"../../../app/stores/store\";\r\nimport ProfileAboutEdit from \"./ProfileEditForm\";\r\nimport NotFound         from \"../../errors/NotFound\";\r\n\r\nexport default observer(function ProfileAbout()\r\n{\r\n    const {profileStore} = useStore();\r\n    const { profile, isCurrentUser } = profileStore;\r\n    const [inEditMode, setInEditMode] = useState(false);\r\n\r\n    if(!profile)\r\n        return <NotFound />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                <Header content={`About ${profile.displayName}`} icon={'user'} floated={'left'} />\r\n                {isCurrentUser &&\r\n                    <Button content={inEditMode ? 'Cancel' : 'Edit Profile'}\r\n                            floated={'right'}\r\n                            basic\r\n                            onClick={() => setInEditMode(!inEditMode)}\r\n                    />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'16'}>\r\n                {inEditMode ? (\r\n                    <ProfileAboutEdit profile={profile} onSubmitted={() => setInEditMode(false)} />\r\n                ) : (\r\n                    <span style={{whiteSpace: 'pre-line'}}>{profile.about || `Hello, I am ${profile.displayName}`}</span>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                from \"react\";\r\nimport {observer}           from \"mobx-react-lite\";\r\nimport {Card, Grid, Header} from \"semantic-ui-react\";\r\nimport {useStore}           from \"../../../app/stores/store\";\r\nimport ProfileCard          from \"../ProfileCard\";\r\nimport {ActiveTab}          from \"../../../app/stores/profileStore\";\r\n\r\nexport default observer(function ProfileFollowings()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, activeTab} = profileStore\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Header\r\n                    floated={\"left\"}\r\n                    icon={'user'}\r\n                    content={activeTab === ActiveTab.Following\r\n                        ? `People ${profile?.displayName} is following`\r\n                        : `People following ${profile?.displayName}`}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Card.Group itemsPerRow={4}>\r\n                    {followings.map(profile =>\r\n                        (\r\n                            <ProfileCard key={profile.userName} profile={profile}/>\r\n                        ))}\r\n                </Card.Group>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                             from \"react\";\r\nimport {ProfileActivity}                 from \"../../../app/models/activity\";\r\nimport {Card, Image}                     from \"semantic-ui-react\";\r\nimport {activityPath, categoryImagePath} from \"../../../utils/paths\";\r\nimport {formatDate}                      from \"../../../utils/date-fns-utils\";\r\nimport {Link}                            from \"react-router-dom\";\r\n\r\ninterface Props\r\n{\r\n    activity: ProfileActivity;\r\n}\r\n\r\nexport default function ProfileActivityCard({activity}: Props)\r\n{\r\n    const now = new Date();\r\n\r\n    return (\r\n        <Card as={Link} to={activityPath(activity.id)}>\r\n            <Image src={categoryImagePath(`${activity.category}.jpg`)} disabled={activity.date < now}/>\r\n            <Card.Content textAlign={'center'}>\r\n                <Card.Header>{activity.title}</Card.Header>\r\n                <Card.Meta>{formatDate(activity.date, \"dd MMM\")}</Card.Meta>\r\n                <Card.Meta>{formatDate(activity.date, \"hh:mm\")}</Card.Meta>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}","import React, {SyntheticEvent, useEffect}          from \"react\";\r\nimport {Card, Grid, Header, Loader, Tab, TabProps} from \"semantic-ui-react\";\r\nimport {observer}                                  from \"mobx-react-lite\";\r\nimport {useStore}                                  from \"../../../app/stores/store\";\r\nimport {ProfileActivitiesPredicate}                from \"../../../app/models/profile\";\r\nimport ProfileActivityCard                         from \"./ProfileActivityCard\";\r\n\r\nclass Pane\r\n{\r\n    menuItem: string;\r\n    key: ProfileActivitiesPredicate;\r\n\r\n    constructor(menuItem: string, key: ProfileActivitiesPredicate)\r\n    {\r\n        this.menuItem = menuItem;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nconst panes = [\r\n    new Pane('Future Events', 'future'),\r\n    new Pane('Past Events', 'past'),\r\n    new Pane('Hosting', 'hosting')\r\n]\r\n\r\nexport default observer(function ProfileEvents()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {profileActivities, isLoading, loadProfileActivities, clearProfileActivities} = profileStore;\r\n\r\n    useEffect(() =>\r\n    {\r\n        loadProfileActivities(panes[0].key)\r\n\r\n        return () =>\r\n        {\r\n            clearProfileActivities()\r\n        };\r\n    }, [loadProfileActivities, clearProfileActivities])\r\n\r\n\r\n    function handleTabChange(event: SyntheticEvent, data: TabProps)\r\n    {\r\n        const index = data.activeIndex as number;\r\n        loadProfileActivities(panes[index].key);\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Header icon={'calendar'} content={'Activities'}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Tab panes={panes}\r\n                     menu={{secondary: true, pointing: true}}\r\n                     onTabChange={handleTabChange}\r\n                     defaultActiveIndex={0}\r\n\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                {isLoading ? (\r\n                    <Loader active={true}/>\r\n                ) : (\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {profileActivities.map(activity => (\r\n                            <ProfileActivityCard key={activity.id} activity={activity}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React             from \"react\";\r\nimport {Tab}             from \"semantic-ui-react\";\r\nimport {observer}    from \"mobx-react-lite\";\r\nimport ProfilePhotos from \"../photos/ProfilePhotos\";\r\nimport ProfileAbout  from \"../about/ProfileAbout\";\r\nimport ProfileFollowings from \"../followings/ProfileFollowings\";\r\nimport {useStore}    from \"../../../app/stores/store\";\r\nimport ProfileEvents from \"../activities/ProfileEvents\";\r\n\r\nexport default observer(function ProfileContent()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {isLoadingFollowers} = profileStore\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane><ProfileAbout /></Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <Tab.Pane><ProfilePhotos /></Tab.Pane>},\r\n        {menuItem: 'Events', render: () => <Tab.Pane><ProfileEvents /></Tab.Pane>},\r\n        {\r\n            menuItem: 'Followers', render: () =>\r\n                <Tab.Pane loading={isLoadingFollowers}>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n        },\r\n        {\r\n            menuItem: 'Following', render: () =>\r\n                <Tab.Pane loading={isLoadingFollowers}>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition={'right'}\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.activeTab = data.activeIndex}\r\n        />\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport {useParams}      from \"react-router-dom\";\r\nimport {useStore}    from \"../../../app/stores/store\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport {Grid}           from \"semantic-ui-react\";\r\nimport ProfileContent   from \"./ProfileContent\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {observer}       from \"mobx-react-lite\";\r\n\r\nexport default observer(function ProfilePage()\r\n{\r\n    const {userName} = useParams<{ userName: string }>();\r\n\r\n    const {profileStore} = useStore();\r\n    const {profile, loadProfile, isLoadingProfile, isCurrentUser} = profileStore;\r\n\r\n    useEffect(() =>\r\n    {\r\n        loadProfile(userName);\r\n\r\n        return () =>\r\n        {\r\n            profileStore.activeTab = 0;\r\n        }\r\n    }, [loadProfile, userName, profileStore])\r\n\r\n    if (isLoadingProfile)\r\n        return <LoadingComponent content={\"Loading profile...\"}/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} isCurrentUser={isCurrentUser} />\r\n                        <ProfileContent />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                                              from \"react\";\r\nimport {Redirect, Route, RouteComponentProps, RouteProps} from \"react-router-dom\";\r\nimport {useStore}                                         from \"../stores/store\";\r\nimport {homePagePath}                                     from \"../../utils/paths\";\r\n\r\ninterface Props extends RouteProps\r\n{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props)\r\n{\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={homePagePath} />}\r\n        />\r\n    )\r\n}","import React, {useEffect}    from \"react\";\r\nimport {useLocation}         from \"react-router-dom\";\r\nimport * as queryString      from \"querystring\";\r\nimport {history}             from \"../../index\";\r\nimport {vkLoginSuccessState} from \"../../utils/paths\";\r\nimport {useStore}            from \"../../app/stores/store\";\r\nimport LoadingComponent      from \"../../app/layout/LoadingComponent\";\r\n\r\nexport default function VkLogin()\r\n{\r\n    const {userStore} = useStore();\r\n\r\n    const {hash} = useLocation();\r\n    const {access_token, email, state} = queryString.parse(hash.substring(1));\r\n\r\n    useEffect(() =>\r\n    {\r\n        userStore.vkLogin(access_token as string, email as string);\r\n    })\r\n    \r\n    if(state !== vkLoginSuccessState)\r\n        history.push('/');\r\n\r\n    return (\r\n        <LoadingComponent content={\"Loading account...\"} />\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport {Container}        from \"semantic-ui-react\";\nimport NavBar             from \"./NavBar\";\nimport ActivityDashboard  from \"../../features/activity/dashboard/ActivityDashboard\";\nimport {observer}         from \"mobx-react-lite\";\nimport {Route, Switch}    from \"react-router-dom\";\nimport HomePage           from \"../../features/home/HomePage\";\nimport ActivityForm       from \"../../features/activity/form/ActivityForm\";\nimport ActivityDetails    from \"../../features/activity/details/ActivityDetails\";\nimport {useLocation}      from 'react-router-dom';\nimport TestError          from '../../features/errors/TestError';\nimport {ToastContainer}   from \"react-toastify\";\nimport NotFound           from \"../../features/errors/NotFound\";\nimport ServerError        from \"../../features/errors/ServerError\";\nimport {useStore}         from \"../stores/store\";\nimport LoadingComponent   from \"./LoadingComponent\";\nimport ModalContainer     from \"../common/modal/ModalContainer\";\nimport ProfilePage        from \"../../features/profiles/main/ProfilePage\";\nimport {\n    activitiesPath,\n    activityPath,\n    createActivityPath,\n    errorsPath, homePagePath,\n    manageActivityPath, profilePath,\n    serverErrorPath, vkLoginPath\n}                         from \"../../utils/paths\";\nimport PrivateRoute       from \"./PrivateRoute\";\nimport VkLogin            from \"../../features/user/VkLogin\";\n\nfunction App()\n{\n    const location = useLocation();\n    const {userStore, commonStore} = useStore();\n\n    useEffect(() =>\n    {\n        if (commonStore.token)\n        {\n            userStore.loadCurrentUser().finally(() => commonStore.setAppLoaded());\n        }\n        else\n        {\n            commonStore.setAppLoaded();\n        }\n    }, [userStore, commonStore])\n\n    if (!commonStore.appLoaded)\n        return <LoadingComponent content={\"Loading app...\"}/>\n\n    return (\n        <>\n            <ToastContainer position={'bottom-right'} hideProgressBar/>\n            <ModalContainer/>\n            <Route exact path={homePagePath} component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        <NavBar/>\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <PrivateRoute exact path={activitiesPath} component={ActivityDashboard}/>\n                                <PrivateRoute path={activityPath(':id')} component={ActivityDetails}/>\n                                <PrivateRoute key={location.key}\n                                              path={[createActivityPath, manageActivityPath(':id')]}\n                                              component={ActivityForm}/>\n                                <PrivateRoute path={profilePath(':userName')} component={ProfilePage}/>\n                                <PrivateRoute path={errorsPath} component={TestError}/>\n                                <Route path={serverErrorPath} component={ServerError}/>\n                                <Route path={vkLoginPath} component={VkLogin}/>\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React                 from 'react';\nimport ReactDOM               from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App                    from './app/layout/App';\nimport reportWebVitals        from './reportWebVitals';\nimport {store, StoreContext}  from \"./app/stores/store\";\nimport {Router}               from \"react-router-dom\";\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop            from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App/>\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}