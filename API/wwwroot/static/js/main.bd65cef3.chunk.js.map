{"version":3,"sources":["utils/paths.ts","app/models/pagination.ts","app/agent/agent.ts","utils/date-fns-utils.ts","app/stores/profileStore.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/models/profile.ts","app/stores/userStore.ts","app/stores/modalStore.ts","app/models/comment.ts","app/stores/commentStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/profiles/followings/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activity/dashboard/ActivityListItemAttendees.tsx","features/activity/dashboard/ActivityListItem.tsx","features/activity/dashboard/ActivityList.tsx","features/activity/dashboard/ActivityFilters.tsx","features/activity/dashboard/ActivityListItemPlaceholder.tsx","features/activity/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","features/user/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/layout/LoadingComponent.tsx","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/—ÅategoryOptions.ts","app/common/form/DateInput.tsx","app/common/modal/ConfirmModal.tsx","features/activity/form/ActivityForm.tsx","features/activity/details/ActivityDetailedHeader.tsx","features/activity/details/ActivityDetailedInfo.tsx","features/activity/details/ActivityDetailedChat.tsx","features/activity/details/ActivityDetailedSidebar.tsx","features/activity/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/main/ProfileHeader.tsx","app/common/imageUploader/PhotoWidgetDropzone.tsx","app/common/imageUploader/PhotoWidgetCropper.tsx","app/common/imageUploader/PhotoUploadWidget.tsx","features/profiles/photos/ProfilePhotos.tsx","features/profiles/about/ProfileEditForm.tsx","features/profiles/about/ProfileAbout.tsx","features/profiles/followings/ProfileFollowings.tsx","features/profiles/activities/ProfileActivityCard.tsx","features/profiles/activities/ProfileEvents.tsx","features/profiles/main/ProfileContent.tsx","features/profiles/main/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["homePagePath","activitiesPath","activityPath","id","manageActivityPath","createActivityPath","profileImagePlaceholder","categoryImagePath","imageName","logoPath","errorsPath","allProfilesPath","profilePath","userName","photosPath","followPath","apiBaseUrl","process","PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","errors","hasOwnProperty","history","push","errorMessages","key","flat","toast","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","getList","params","getActivity","create","activity","edit","attend","attendActivityPath","Account","currentUser","login","user","register","Profiles","getProfile","uploadPhoto","file","formaData","FormData","append","setMainImage","setMainPhotoPath","deleteImage","updateProfile","profile","updateFollowing","getFollowings","predicate","followListPath","getProfileActivities","profileActivitiesPath","formatDate","date","dateFormat","format","ActiveTab","ActivityStore","_activities","Map","_selectedActivity","undefined","_isLoadingInitial","_isLoading","_pagination","_pagingParams","_predicates","set","hasActivity","activityId","has","setIsLoadingInitial","value","setIsLoading","setPagination","setPagingParams","setPredicate","forEach","loadActivities","loadInitial","axiosPagingParams","result","setActivity","loadActivity","runInAction","createActivity","activityFormValues","userStore","currentUserName","attendee","getProfileWrapper","runInLoading","newActivity","toActivity","hostUserName","attendees","editActivity","updatedActivity","deleteActivity","isGoing","some","p","isHosting","host","find","Date","updateAttendance","selectedActivity","filter","u","cancelSelectedActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","fn","console","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","Object","entries","activitiesByDate","reduce","activities","URLSearchParams","toString","toISOString","jwtLocalKey","CommonStore","_error","_token","window","localStorage","getItem","_appLoaded","setItem","removeItem","Profile","displayName","image","UserStore","credentials","setToken","modalStore","closeModal","logout","registerValues","loadCurrentUser","log","setCurrentUserMainImage","setDisplayName","ModalStore","_content","_isOpen","openModal","content","ProfileStore","_profile","_isLoadingProfile","_isUploading","_activeTab","_followings","_isLoadingFollowers","_profileActivities","loadProfile","photo","photos","isMain","currentMain","profileValues","about","activityStore","followToAdd","targetingCurrentProfile","followingCount","loadProfileActivities","clearProfileActivities","loadFollowings","followings","activeTab","Following","Followers","ChatCommentFormValues","CommentStore","_comments","_hubConnection","createHubConnection","HubConnectionBuilder","withUrl","commentUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comments","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","ActivitiesStore","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","currentImage","currentDisplayName","Menu","inverted","fixed","Container","MenuItem","as","NavLink","exact","to","header","src","alt","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Item","Link","icon","onClick","isLoading","Reveal","animated","Content","visible","style","width","fluid","color","hidden","event","preventDefault","handleFollow","basic","loading","aboutLength","aboutContent","length","substring","truncate","Card","Header","Description","extra","Icon","followingImageStyles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","title","marginRight","venue","secondary","clearing","description","floated","groupedActivities","sub","predicates","vertical","marginTop","active","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","isLoadingInitial","useState","isLoadingNextActivities","setIsLoadingNextActivities","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPagesCount","initialLoad","Column","Loader","TextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","ActivityFormValues","category","city","LoadingComponent","Dimmer","TextAreaInput","SelectInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","categoryOptions","DateInput","selected","ConfirmModal","confirmCallback","cancelCallback","headerContent","confirmLoading","setConfirmLoading","display","justifyContent","padding","useParams","useHistory","uuid","onDeleteClick","handleDeleteActivity","enableReinitialize","rows","placeholderText","showTimeSelect","timeCaption","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","verticalAlign","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","clearSelectedActivity","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","details","Modal","open","isOpen","onClose","Statistic","Divider","zoneStyles","borderRadius","paddingTop","zoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","assign","File","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","dragMode","autoCropArea","modal","background","zoomOnWheel","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","inAddPhotoMode","setInAddPhotoMode","target","setTarget","isCurrentUser","isUploading","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","onSubmitted","inEditMode","setInEditMode","ProfileActivityCard","now","Meta","Pane","menuItem","panes","profileActivities","Tab","menu","onTabChange","index","activeIndex","defaultActiveIndex","isLoadingFollowers","menuPosition","e","isLoadingProfile","PrivateRoute","Component","component","rest","location","useLocation","finally","setAppLoaded","appLoaded","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","TestError","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.bd65cef3.chunk.js","sourcesContent":["export const homePagePath = '/';\r\n\r\nexport const activitiesPath = `/activities`;\r\nexport const activityPath = (id: string) => activitiesPath + `/${id}`;\r\nexport const attendActivityPath = (id: string) => activityPath(id) + '/attend';\r\nexport const manageActivityPath = (id: string) => `/manage/${id}`;\r\nexport const createActivityPath = '/createActivity'\r\n\r\nexport const profileImagePlaceholder = '/assets/user.png'\r\nexport const categoryImagePath = (imageName: string) => `/assets/categoryImages/${imageName}`\r\nexport const logoPath = '/assets/logo.png'\r\n\r\nexport const errorsPath = '/errors';\r\nexport const serverErrorPath = '/server-error';\r\n\r\nexport const accountPath = '/account';\r\nexport const loginPath = '/account/login';\r\nexport const registerPath = '/account/register';\r\n\r\nexport const allProfilesPath = '/profiles';\r\nexport const profilePath = (userName: string) => allProfilesPath + `/${userName}`;\r\n\r\nexport const photosPath = (id: string) => `/photos/${id}`;\r\nexport const setMainPhotoPath = (id: string) => photosPath(id) + '/setmain';\r\n\r\nexport const followPath = (userName: string) => `/follow/${userName}`;\r\nexport const followListPath = (userName: string, predicate: string) => followPath(userName) + `?predicate=${predicate}`\r\n\r\nexport const profileActivitiesPath = (userName: string, predicate: 'hosting' | 'future' | 'past') =>\r\n    `/profiles/${userName}/activities?predicate=${predicate}`\r\n\r\n//urls\r\nexport const apiBaseUrl = process.env.REACT_APP_API_URL;\r\nexport const chatUrl = process.env.REACT_APP_CHAR_URL;\r\nexport const commentUrl = (activityId: string) => chatUrl + `?activityId=${activityId}`;","export interface Pagination\r\n{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItemsCount: number;\r\n    totalPagesCount: number;\r\n}\r\n\r\nexport class PaginatedResult<T>\r\n{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination)\r\n    {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams\r\n{\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 4)\r\n    {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, {AxiosError, AxiosResponse}              from \"axios\";\r\nimport {Activity, ActivityFormValues, ProfileActivity} from \"../models/activity\";\r\nimport {toast}                                         from \"react-toastify\";\r\nimport {history}                                          from \"../../index\";\r\nimport {store}                                            from \"../stores/store\";\r\nimport {User, UserFormValues} from \"../models/user\";\r\nimport {\r\n    accountPath,\r\n    activitiesPath,\r\n    activityPath, allProfilesPath,\r\n    attendActivityPath, apiBaseUrl, followListPath, followPath,\r\n    loginPath,\r\n    photosPath, profileActivitiesPath,\r\n    profilePath,\r\n    registerPath, setMainPhotoPath\r\n} from \"../../utils/paths\";\r\nimport {\r\n    Profile,\r\n    Photo,\r\n    ProfileFormValues,\r\n    FollowingStatus,\r\n    ProfileActivitiesPredicate,\r\n    FollowingsPredicate\r\n}                        from \"../models/profile\";\r\nimport {PaginatedResult} from \"../models/pagination\";\r\n\r\nconst sleep = (delay: number) =>\r\n{\r\n    return new Promise((resolve) =>\r\n    {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = apiBaseUrl;\r\n\r\naxios.interceptors.request.use(config =>\r\n{\r\n    const token = store.commonStore.token;\r\n    if (token)\r\n        config.headers.Authorization = `Bearer ${token}`\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async (response) =>\r\n    {\r\n        if(process.env.NODE_ENV === 'development')\r\n            await sleep(1000);\r\n\r\n        const pagination = response.headers['pagination'];\r\n        if(pagination)\r\n        {\r\n            response.data = new PaginatedResult<any>(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n\r\n        return response;\r\n    },\r\n    (error: AxiosError) =>\r\n    {\r\n        const {data, status} = error.response!;\r\n\r\n        switch (status)\r\n        {\r\n            case 400:\r\n                if (data.errors)\r\n                {\r\n                    //bad guid\r\n                    if (data.errors.hasOwnProperty('guid'))\r\n                    {\r\n                        history.push('/not-found');\r\n                    }\r\n\r\n                    //validation error\r\n                    const errorMessages = [];\r\n                    for (const key in data.errors)\r\n                    {\r\n                        if (data.errors[key])\r\n                        {\r\n                            errorMessages.push(data.errors[key]);\r\n                        }\r\n                    }\r\n\r\n                    throw errorMessages.flat();\r\n                }\r\n                else\r\n                {\r\n                    //bad request\r\n                    toast.error(data);\r\n                }\r\n                break;\r\n            case 401:\r\n                toast.error('Unauthorised');\r\n                break;\r\n            case 404:\r\n                history.push('/not-found');\r\n                break;\r\n            case 500:\r\n                store.commonStore.error = data;\r\n                history.push('/server-error')\r\n                break;\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    })\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    getList: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(activitiesPath, {params})\r\n        .then(responseBody),\r\n    getActivity: (id: string) => requests.get<Activity>(activityPath(id)),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(activitiesPath, activity),\r\n    edit: (activity: ActivityFormValues) => requests.put<void>(activityPath(activity.id || \"unknown\"), activity),\r\n    delete: (id: string) => requests.delete<void>(activityPath(id)),\r\n\r\n    //attend (for regular user) or cancel (for host)\r\n    attend: (id: string) => requests.post<void>(attendActivityPath(id), {}),\r\n}\r\n\r\nconst Account = {\r\n    currentUser: () => requests.get<User>(accountPath),\r\n    login: (user: UserFormValues) => requests.post<User>(loginPath, user),\r\n    register: (user: UserFormValues) => requests.post<User>(registerPath, user)\r\n}\r\n\r\nconst Profiles = {\r\n    getProfile: (userName: string) => requests.get<Profile>(profilePath(userName)),\r\n    uploadPhoto: (file: Blob) =>\r\n    {\r\n        let formaData = new FormData();\r\n        formaData.append('File', file);\r\n        return axios.post<Photo>('photos', formaData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n\r\n    setMainImage: (id: string) => requests.post<void>(setMainPhotoPath(id), {}),\r\n    deleteImage: (id: string) => requests.delete<void>(photosPath(id)),\r\n    updateProfile: (profile: ProfileFormValues) => requests.put<void>(allProfilesPath, profile),\r\n\r\n    updateFollowing: (userName: string) => requests.post<FollowingStatus>(followPath(userName), {}),\r\n    getFollowings: (userName: string, predicate: FollowingsPredicate) =>\r\n        requests.get<Profile[]>((followListPath(userName, predicate))),\r\n\r\n    getProfileActivities: (userName: string, predicate: ProfileActivitiesPredicate) =>\r\n        requests.get<ProfileActivity[]>(profileActivitiesPath(userName, predicate))\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import {format} from \"date-fns\"\r\n\r\nexport function formatDate(date: Date | null, dateFormat: string)\r\n{\r\n    if(!date)\r\n        return \"INCORRECT DATE\";\r\n\r\n    return format(date!, dateFormat);\r\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport {\r\n    Profile,\r\n    Photo,\r\n    ProfileFormValues,\r\n    ProfileActivitiesPredicate,\r\n    FollowingsPredicate\r\n}                                                  from \"../models/profile\";\r\nimport agent                                       from \"../agent/agent\";\r\nimport {store}                                     from \"./store\";\r\nimport {ProfileActivity}                           from \"../models/activity\";\r\n\r\nexport enum ActiveTab\r\n{\r\n    About,\r\n    Photos,\r\n    Events,\r\n    Followers,\r\n    Following,\r\n}\r\n\r\nexport default class ProfileStore\r\n{\r\n    private _profile: Profile | null = null;\r\n    private _isLoadingProfile = false;\r\n    private _isUploading = false;\r\n    private _isLoading = false; //setting main or deleting photo\r\n    private _activeTab: ActiveTab = 0;\r\n\r\n    private _followings: Profile[] = [];\r\n    private _isLoadingFollowers = false;\r\n\r\n    private _profileActivities: ProfileActivity[] = []\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n        reaction(() => this._activeTab,\r\n            activeTab =>\r\n            {\r\n                if (activeTab === ActiveTab.Following || activeTab === ActiveTab.Followers)\r\n                {\r\n                    const predicate = activeTab === ActiveTab.Followers ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate)\r\n                }\r\n                else\r\n                {\r\n                    this._followings = [];\r\n                }\r\n            })\r\n    }\r\n\r\n    public get profile()\r\n    {\r\n        return this._profile;\r\n    }\r\n\r\n    public get profileActivities()\r\n    {\r\n        return this._profileActivities;\r\n    }\r\n\r\n    public get isLoadingProfile()\r\n    {\r\n        return this._isLoadingProfile;\r\n    }\r\n\r\n    public get isUploading()\r\n    {\r\n        return this._isUploading;\r\n    }\r\n\r\n    public get isLoading()\r\n    {\r\n        return this._isLoading;\r\n    }\r\n\r\n    public get isLoadingFollowers()\r\n    {\r\n        return this._isLoadingFollowers;\r\n    }\r\n\r\n    public get followings()\r\n    {\r\n        return this._followings;\r\n    }\r\n\r\n    public get isCurrentUser()\r\n    {\r\n        const currentUserName = store.userStore.currentUserName;\r\n        if (this._profile)\r\n        {\r\n            return currentUserName === this._profile.userName;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public get activeTab()\r\n    {\r\n        return this._activeTab;\r\n    }\r\n\r\n    public set activeTab(value: any)\r\n    {\r\n        this._activeTab = value;\r\n    }\r\n\r\n    loadProfile = async (userName: string) =>\r\n    {\r\n        this._isLoadingProfile = true;\r\n\r\n        try\r\n        {\r\n            const profile = await agent.Profiles.getProfile(userName);\r\n            runInAction(() =>\r\n            {\r\n                this._profile = profile\r\n            })\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isLoadingProfile = false);\r\n        }\r\n    }\r\n\r\n    public uploadPhoto = async (file: Blob) =>\r\n    {\r\n        this._isUploading = true;\r\n\r\n        try\r\n        {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain)\r\n                    {\r\n                        store.userStore.setCurrentUserMainImage(photo.url);\r\n                        this._profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isUploading = false);\r\n        }\r\n    }\r\n\r\n    public setMainImage = async (image: Photo) =>\r\n    {\r\n        const currentMain = this._profile?.photos?.find(p => p.isMain);\r\n        if (currentMain?.id === image.id)\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.setMainImage(image.id);\r\n\r\n            store.userStore.setCurrentUserMainImage(image.url);\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile && this._profile.photos)\r\n                {\r\n                    this._profile.image = image.url;\r\n                    currentMain!.isMain = false;\r\n                    this._profile.photos.find(p => p.id === image.id)!.isMain = true;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public deleteImage = async (image: Photo) =>\r\n    {\r\n        if (!this._profile?.photos?.some(p => p.id === image.id))\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.deleteImage(image.id);\r\n\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.photos = this._profile.photos?.filter(p => p.id !== image.id);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public updateProfile = async (profileValues: ProfileFormValues) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Profiles.updateProfile(profileValues);\r\n\r\n            store.userStore.setDisplayName(profileValues.displayName);\r\n            runInAction(() =>\r\n            {\r\n                if (this._profile)\r\n                {\r\n                    this._profile.displayName = profileValues.displayName;\r\n                    this._profile.about = profileValues.about;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public updateFollowing = (userName: string) =>\r\n    {\r\n        this.runInLoading(async () =>\r\n        {\r\n            const status = await agent.Profiles.updateFollowing(userName);\r\n            const following = status.following;\r\n            store.activityStore.updateAttendeeFollowing(userName);\r\n\r\n            const followToAdd = following ? 1 : -1;\r\n\r\n            runInAction(() =>\r\n            {\r\n                //changing current profile counts\r\n                if (this._profile)\r\n                {\r\n                    const targetingCurrentProfile = this._profile.userName === userName;\r\n                    const isCurrentUserProfile = this._profile.userName === store.userStore.currentUserName\r\n\r\n                    if(isCurrentUserProfile)\r\n                    {\r\n                        this._profile.followingCount += followToAdd;\r\n                    }\r\n                    else if (targetingCurrentProfile)\r\n                    {\r\n                        this._profile.followersCount += followToAdd;\r\n                        this._profile.following = following;\r\n                    }\r\n                }\r\n\r\n\r\n                this._followings.forEach(profile =>\r\n                {\r\n                    if (profile.userName === userName)\r\n                    {\r\n                        profile.followersCount += followToAdd;\r\n                        profile.following = following;\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    public loadProfileActivities = (predicate: ProfileActivitiesPredicate | undefined) =>\r\n    {\r\n        if(!predicate)\r\n            return;\r\n\r\n        return this.runInLoading(async () =>\r\n        {\r\n            if(this._profile)\r\n            {\r\n                const activities = await agent.Profiles.getProfileActivities(this._profile.userName, predicate);\r\n\r\n                activities.forEach(activity =>\r\n                {\r\n                    activity.date = new Date(activity.date);\r\n                })\r\n\r\n                runInAction(() => this._profileActivities = activities)\r\n            }\r\n        })\r\n    }\r\n\r\n    public clearProfileActivities = () => this._profileActivities = []\r\n\r\n    private loadFollowings = async (predicate: FollowingsPredicate) =>\r\n    {\r\n        this._isLoadingFollowers = true;\r\n\r\n        try\r\n        {\r\n            const followings = await agent.Profiles.getFollowings(this._profile?.userName!, predicate);\r\n            runInAction(() => this._followings = followings)\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(() => this._isLoadingFollowers = false);\r\n        }\r\n    }\r\n\r\n    private runInLoading = async (fn: () => Promise<void>) =>\r\n    {\r\n        this.setIsLoading(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    private setIsLoading(value: boolean)\r\n    {\r\n        this._isLoading = value;\r\n    }\r\n}","import {Activity, ActivityFormValues}              from \"../models/activity\";\r\nimport {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent                                       from \"../agent/agent\";\r\nimport {formatDate}                      from \"../../utils/date-fns-utils\";\r\nimport {store}                    from \"./store\";\r\nimport {Pagination, PagingParams} from \"../models/pagination\";\r\n\r\nexport default class ActivityStore\r\n{\r\n    public _activities = new Map<string, Activity>(); //key - id, value - activity\r\n    private _selectedActivity: Activity | undefined = undefined;\r\n    private _isLoadingInitial = false;\r\n    private _isLoading = false; //creating, editing, deleting activity\r\n    private _pagination: Pagination | null = null;\r\n    private _pagingParams = new PagingParams();\r\n    private _predicates = new Map().set('all', true);\r\n\r\n    public constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this._predicates.keys(),\r\n            () =>\r\n            {\r\n                this._pagingParams = new PagingParams();\r\n                this._activities.clear();\r\n                this.loadActivities();\r\n            })\r\n    }\r\n\r\n    public get activitiesByDate()\r\n    {\r\n        return Array.from(this._activities.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    public get groupedActivities()\r\n    {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>\r\n            {\r\n                const date = formatDate(activity.date, \"dd MMM yyyy\");\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    public get selectedActivity()\r\n    {\r\n        return this._selectedActivity;\r\n    }\r\n\r\n    public get isLoadingInitial()\r\n    {\r\n        return this._isLoadingInitial;\r\n    }\r\n\r\n    public get isLoading()\r\n    {\r\n        return this._isLoading;\r\n    }\r\n\r\n    public get axiosPagingParams()\r\n    {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this._pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this._pagingParams.pageSize.toString());\r\n\r\n        this._predicates.forEach((value, key) =>\r\n        {\r\n            if(key === 'startDate')\r\n            {\r\n                params.append(key, (value as Date).toISOString());\r\n            }\r\n            else\r\n            {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    public get pagination()\r\n    {\r\n        return this._pagination;\r\n    }\r\n\r\n    public get predicates()\r\n    {\r\n        return this._predicates;\r\n    }\r\n\r\n    public clearSelectedActivity()\r\n    {\r\n        this._selectedActivity = undefined;\r\n    }\r\n\r\n    public hasActivity = (activityId: string) =>\r\n    {\r\n        return this._activities.has(activityId);\r\n    }\r\n\r\n    public setIsLoadingInitial = (value: boolean) => this._isLoadingInitial = value;\r\n\r\n    public setIsLoading = (value: boolean) => this._isLoading = value;\r\n\r\n    public setPagination = (value: Pagination) => this._pagination = value;\r\n\r\n    public setPagingParams = (value: PagingParams) => this._pagingParams = value;\r\n\r\n    public setPredicate = (predicate: string, value: string | Date) =>\r\n    {\r\n        const resetParams = () =>\r\n        {\r\n            this._predicates.forEach((value, key) =>\r\n            {\r\n                if(key !== 'startDate')\r\n                    this._predicates.delete(key);\r\n            })\r\n        }\r\n\r\n        if(predicate === 'startDate')\r\n        {\r\n            this._predicates.delete(predicate); // for MobX reaction\r\n        }\r\n        else\r\n        {\r\n            resetParams();\r\n        }\r\n\r\n        this._predicates.set(predicate, value);\r\n    }\r\n\r\n    public loadActivities = async () =>\r\n    {\r\n        await this.loadInitial(async () =>\r\n        {\r\n            const result = await agent.Activities.getList(this.axiosPagingParams);\r\n\r\n            result.data.forEach(activity =>\r\n            {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n        })\r\n    }\r\n\r\n    public loadActivity = async (id: string) =>\r\n    {\r\n        return await this.loadInitial<Activity>(async () =>\r\n        {\r\n            let activity = this.getActivity(id);\r\n\r\n            if (activity)\r\n            {\r\n                this._selectedActivity = activity;\r\n                return activity;\r\n            }\r\n            else\r\n            {\r\n                activity = await agent.Activities.getActivity(id);\r\n\r\n                this.setActivity(activity);\r\n                runInAction(() => this._selectedActivity = activity);\r\n\r\n                return activity;\r\n            }\r\n        })\r\n    }\r\n\r\n    public createActivity = async (activityFormValues: ActivityFormValues) =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n        const attendee = store.userStore.getProfileWrapper();\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.create(activityFormValues);\r\n\r\n            const newActivity = activityFormValues.toActivity();\r\n            newActivity.hostUserName = userName!;\r\n            newActivity.attendees = [attendee!];\r\n\r\n            this.setActivity(newActivity)\r\n            runInAction(() => this._selectedActivity = newActivity)\r\n        })\r\n    }\r\n\r\n    public editActivity = async (activity: ActivityFormValues) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.edit(activity);\r\n\r\n            runInAction(() =>\r\n            {\r\n                if(activity.id)\r\n                {\r\n                    const updatedActivity = {...this.getActivity(activity.id), ...activity} as Activity\r\n\r\n                    this._activities.set(activity.id, updatedActivity);\r\n                    this._selectedActivity = updatedActivity;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public deleteActivity = async (id: string) =>\r\n    {\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() =>\r\n            {\r\n                this._activities.delete(id);\r\n            })\r\n        })\r\n    }\r\n\r\n    private setActivity = (activity: Activity) =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n        if(userName)\r\n        {\r\n            activity.isGoing = activity.attendees?.some(p => p.userName === userName)\r\n            activity.isHosting = activity.hostUserName === userName;\r\n            activity.host = activity.attendees?.find(p => p.userName === activity.hostUserName);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this._activities.set(activity.id, activity);\r\n    }\r\n\r\n    public updateAttendance = async () =>\r\n    {\r\n        const userName = store.userStore.currentUserName;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n\r\n            runInAction(() =>\r\n            {\r\n               if(this.selectedActivity?.isGoing)\r\n               {\r\n                   //cancelled the attendance\r\n                   this.selectedActivity.attendees = this.selectedActivity\r\n                            .attendees?.filter(u => u.userName !== userName)\r\n\r\n                   this.selectedActivity!.isGoing = false;\r\n               }\r\n               else\r\n               {\r\n                   //joined activity\r\n                   const attendee = store.userStore.getProfileWrapper()\r\n                   this.selectedActivity?.attendees?.push(attendee!);\r\n                   this.selectedActivity!.isGoing = true;\r\n               }\r\n\r\n               this._activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        })\r\n    }\r\n\r\n    public cancelSelectedActivityToggle = async () =>\r\n    {\r\n        if(!this._selectedActivity)\r\n            return;\r\n\r\n        await this.runInLoading(async () =>\r\n        {\r\n            await agent.Activities.attend(this._selectedActivity!.id);\r\n            runInAction(() => {\r\n                this._selectedActivity!.isCancelled = !this._selectedActivity!.isCancelled\r\n                this._activities.set(this._selectedActivity!.id, this._selectedActivity!);\r\n            });\r\n        })\r\n    }\r\n\r\n    public updateAttendeeFollowing = (userName: string) =>\r\n    {\r\n        this._activities.forEach(activity =>\r\n        {\r\n            activity.attendees.forEach(attendee =>\r\n            {\r\n                if(attendee.userName === userName)\r\n                {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    private getActivity = (id: string) =>\r\n    {\r\n        return this._activities.get(id);\r\n    }\r\n\r\n    private runInLoading = async (fn: () => Promise<void>) =>\r\n    {\r\n        this.setIsLoading(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    private loadInitial = async <T>(fn: () => Promise<T>) =>\r\n    {\r\n        this.setIsLoadingInitial(true);\r\n\r\n        try\r\n        {\r\n            return await fn();\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n        }\r\n        finally\r\n        {\r\n            this.setIsLoadingInitial(false);\r\n        }\r\n    }\r\n}","import ServerError                    from \"../models/serverError\";\r\nimport {makeAutoObservable, reaction} from \"mobx\";\r\n\r\nconst jwtLocalKey = \"jwt\";\r\n\r\nexport default class CommonStore\r\n{\r\n    private _error: ServerError | null = null;\r\n    private _token: string | null = window.localStorage.getItem(jwtLocalKey);\r\n    private _appLoaded = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this._token,\r\n            token =>\r\n            {\r\n                if (token)\r\n                {\r\n                    window.localStorage.setItem(jwtLocalKey, token);\r\n                }\r\n                else\r\n                {\r\n                    window.localStorage.removeItem(jwtLocalKey);\r\n                }\r\n            })\r\n    }\r\n\r\n    public set error(value: ServerError | null)\r\n    {\r\n        this._error = value;\r\n    }\r\n\r\n    public get error()\r\n    {\r\n        return this._error;\r\n    }\r\n\r\n    public setToken(value: string | null)\r\n    {\r\n        this._token = value;\r\n    }\r\n\r\n    public get token()\r\n    {\r\n        return this._token;\r\n    }\r\n\r\n    public setAppLoaded()\r\n    {\r\n        this._appLoaded = true;\r\n    }\r\n\r\n    public get appLoaded()\r\n    {\r\n        return this._appLoaded;\r\n    }\r\n}","import {User} from \"./user\";\r\n\r\nexport interface Profile\r\n{\r\n    userName: string;\r\n    displayName: string;\r\n    about?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n\r\n    following: boolean; //whether current user following this one\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile\r\n{\r\n    constructor(user: User)\r\n    {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo\r\n{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface FollowingStatus\r\n{\r\n    following: boolean;\r\n}\r\n\r\nexport type FollowingsPredicate = 'followers' | 'following';\r\n\r\nexport class ProfileFormValues\r\n{\r\n    displayName: string;\r\n    about?: string;\r\n\r\n    constructor(profile: Profile)\r\n    {\r\n        this.displayName = profile.displayName;\r\n        this.about = profile.about;\r\n    }\r\n}\r\n\r\nexport type ProfileActivitiesPredicate = 'hosting' | 'future' | 'past';","import {User, UserFormValues}            from \"../models/user\";\r\nimport {makeAutoObservable, runInAction} from \"mobx\";\r\nimport agent                             from \"../agent/agent\";\r\nimport {store}                           from \"./store\";\r\nimport {history}                         from \"../../index\";\r\nimport {activitiesPath, homePagePath} from \"../../utils/paths\";\r\nimport {Profile}                      from \"../models/profile\";\r\n\r\nexport default class UserStore\r\n{\r\n    private user: User | null = null;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get isLoggedIn()\r\n    {\r\n        return !!this.user;\r\n    }\r\n\r\n    public get currentUserName()\r\n    {\r\n        return this.user?.userName;\r\n    }\r\n\r\n    public get currentImage()\r\n    {\r\n        return this.user?.image;\r\n    }\r\n\r\n    public get currentDisplayName()\r\n    {\r\n        return this.user?.displayName;\r\n    }\r\n\r\n    public getProfileWrapper = () =>\r\n    {\r\n        return this.user ? new Profile(this.user) : null;\r\n    }\r\n\r\n    public login = async (credentials: UserFormValues) =>\r\n    {\r\n        const user = await agent.Account.login(credentials);\r\n        store.commonStore.setToken(user.token);\r\n\r\n        runInAction(() => this.user = user);\r\n\r\n        history.push(activitiesPath);\r\n        store.modalStore.closeModal();\r\n    }\r\n\r\n    public logout = () =>\r\n    {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n\r\n        history.push(homePagePath);\r\n    }\r\n\r\n    public register = async (registerValues: UserFormValues) =>\r\n    {\r\n        const user = await agent.Account.register(registerValues);\r\n        store.commonStore.setToken(user.token);\r\n\r\n        runInAction(() => this.user = user);\r\n\r\n        history.push(activitiesPath);\r\n        store.modalStore.closeModal();\r\n    }\r\n\r\n    public loadCurrentUser = async () =>\r\n    {\r\n        try\r\n        {\r\n            const user = await agent.Account.currentUser();\r\n            runInAction(() => this.user = user);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    public setCurrentUserMainImage = (image: string) =>\r\n    {\r\n        if(this.user)\r\n            this.user.image = image\r\n    }\r\n\r\n    public setDisplayName = (displayName: string) =>\r\n    {\r\n        if(this.user)\r\n            this.user.displayName = displayName;\r\n    }\r\n}","import {makeAutoObservable} from \"mobx\";\r\n\r\nexport default class ModalStore\r\n{\r\n    private _content: JSX.Element | null = null;\r\n    private _isOpen = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public openModal = (content: JSX.Element) =>\r\n    {\r\n        this._content = content;\r\n        this._isOpen = true;\r\n    }\r\n\r\n    public closeModal = () =>\r\n    {\r\n        this._content = null;\r\n        this._isOpen = false;\r\n    }\r\n\r\n    public get content()\r\n    {\r\n        return this._content;\r\n    }\r\n\r\n    public get isOpen()\r\n    {\r\n        return this._isOpen;\r\n    }\r\n}","export interface ChatComment\r\n{\r\n    id: number;\r\n    createdAt: Date;\r\n    body: string;\r\n    userName: string;\r\n    displayName: string;\r\n    image: string;\r\n}\r\n\r\nexport class ChatCommentFormValues\r\n{\r\n    body: string;\r\n    activityId: string;\r\n\r\n    constructor(body: string, activityId: string)\r\n    {\r\n        this.body = body\r\n        this.activityId = activityId;\r\n    }\r\n}","import {ChatComment, ChatCommentFormValues}            from \"../models/comment\";\r\nimport {makeAutoObservable, runInAction}               from \"mobx\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\nimport {store}      from \"./store\";\r\nimport {commentUrl} from \"../../utils/paths\";\r\n\r\nexport default class CommentStore\r\n{\r\n    private _comments: ChatComment[] = [];\r\n    private _hubConnection: HubConnection | null = null;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get comments()\r\n    {\r\n        return this._comments;\r\n    }\r\n\r\n    public createHubConnection = (activityId: string) =>\r\n    {\r\n        if (store.activityStore.hasActivity(activityId))\r\n        {\r\n            this._hubConnection = new HubConnectionBuilder()\r\n                .withUrl(commentUrl(activityId),\r\n                    {\r\n                        accessTokenFactory: () => store.commonStore.token!\r\n                    })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this._hubConnection.start()\r\n                .catch(error => console.log(\"Error establishing the connection: \", error))\r\n\r\n            this._hubConnection.on(\"LoadComments\", (comments: ChatComment[]) =>\r\n            {\r\n                runInAction(() =>\r\n                {\r\n                    comments.forEach(comment =>\r\n                    {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z'); //'Z' - to make date UTC\r\n                    })\r\n                    this._comments = comments\r\n                });\r\n            })\r\n\r\n            this._hubConnection.on(\"ReceiveComment\", (comment: ChatComment) =>\r\n            {\r\n                runInAction(() =>\r\n                {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this._comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    public stopHubConnection = () =>\r\n    {\r\n        this._hubConnection?.stop()\r\n            .catch(error => console.log(\"Error stopping connection: \", error));\r\n    }\r\n\r\n    public clearComments = () =>\r\n    {\r\n        this._comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    public addComment = async (body: string) =>\r\n    {\r\n        const activityId = store.activityStore.selectedActivity?.id;\r\n        const comment = new ChatCommentFormValues(body, activityId!);\r\n\r\n        try\r\n        {\r\n            await this._hubConnection?.invoke('SendComment', comment);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import ActivitiesStore             from \"./activityStore\";\r\nimport {createContext, useContext} from \"react\";\r\nimport CommonStore                 from \"./commonStore\";\r\nimport UserStore                   from \"./userStore\";\r\nimport ModalStore                  from \"./modalStore\";\r\nimport ProfileStore                from \"./profileStore\";\r\nimport CommentStore                from \"./commentStore\";\r\n\r\ninterface Store\r\n{\r\n    activityStore: ActivitiesStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivitiesStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore()\r\n{\r\n    return useContext(StoreContext);\r\n}","import React                                                from \"react\";\r\nimport {Button, Container, Dropdown, Image, Menu, MenuItem} from \"semantic-ui-react\";\r\nimport {Link, NavLink}                                      from \"react-router-dom\";\r\nimport {observer}                                           from \"mobx-react-lite\";\r\nimport {useStore} from \"../stores/store\";\r\nimport {\r\n    activitiesPath,\r\n    createActivityPath,\r\n    errorsPath, homePagePath,\r\n    logoPath,\r\n    profileImagePlaceholder,\r\n    profilePath\r\n}                 from \"../../utils/paths\";\r\n\r\nexport default observer(function NavBar()\r\n{\r\n    const {userStore} = useStore();\r\n    const {logout, currentUserName, currentImage, currentDisplayName} = userStore;\r\n\r\n    return (\r\n        <Menu inverted fixed={\"top\"}>\r\n            <Container>\r\n                <MenuItem as={NavLink} exact to={homePagePath} header>\r\n                    <img src={logoPath} alt={\"logo\"}/>\r\n                    Reactivities\r\n                </MenuItem>\r\n                <MenuItem as={NavLink} to={activitiesPath} name=\"Activities\"/>\r\n                <MenuItem as={NavLink} to={errorsPath} name=\"Errors\"/>\r\n                <MenuItem>\r\n                    <Button as={NavLink} to={createActivityPath} content=\"Create Activity\" positive/>\r\n                </MenuItem>\r\n                <MenuItem position={\"right\"}>\r\n                    <Image src={currentImage || profileImagePlaceholder} avatar spaced={\"right\"} />\r\n                    <Dropdown pointing={'top left'} text={currentDisplayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link}\r\n                                           to={profilePath(currentUserName || \"unknown\")}\r\n                                           content={'My profile'}\r\n                                           icon={'user'} />\r\n                            <Dropdown.Item onClick={logout}\r\n                                           content={'Logout'}\r\n                                           icon={'power'} />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, {SyntheticEvent} from \"react\";\r\nimport {Profile}               from \"../../../app/models/profile\";\r\nimport {observer}              from \"mobx-react-lite\";\r\nimport {Button, Reveal}        from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props)\r\n{\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, isLoading} = profileStore;\r\n\r\n    function handleFollow(event: SyntheticEvent, userName: string)\r\n    {\r\n        event.preventDefault();\r\n        updateFollowing(userName);\r\n    }\r\n\r\n    if(profile.userName === userStore.currentUserName)\r\n        return null;\r\n\r\n    return (\r\n        <Reveal animated={'move'}>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    color={'teal'}\r\n                    content={profile.following ? 'Following' : 'Not following'}/>\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button onClick={(event) => handleFollow(event, profile.userName)}\r\n                        fluid\r\n                        basic\r\n                        color={profile.following ? 'red' : \"green\"}\r\n                        content={profile.following ? 'Unfollow' : 'Follow'}\r\n                        loading={isLoading}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React                                  from \"react\";\r\nimport {Profile}                              from \"../../app/models/profile\";\r\nimport {Card, Icon, Image}                    from \"semantic-ui-react\";\r\nimport {Link}                                 from \"react-router-dom\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../utils/paths\";\r\nimport FollowButton                           from \"./followings/FollowButton\";\r\nimport {observer}                             from \"mobx-react-lite\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    aboutLength?: number;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile, aboutLength = 40}: Props)\r\n{\r\n    function truncate(text: string | undefined)\r\n    {\r\n        if(text)\r\n        {\r\n            return text.length > aboutLength ? text.substring(0, aboutLength - 3) + '...' : text;\r\n        }\r\n    }\r\n\r\n    const aboutContent = profile.about ? truncate(profile.about) : `Hello, I am ${profile.displayName}`\r\n\r\n    return (\r\n        <Card as={Link} to={profilePath(profile.userName)}>\r\n            <Image src={profile.image || profileImagePlaceholder}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{aboutContent}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name={\"user\"}/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import React                                  from 'react';\r\nimport {observer}                             from \"mobx-react-lite\";\r\nimport {List, Image, Popup}                   from \"semantic-ui-react\";\r\nimport {Profile}                              from \"../../../app/models/profile\";\r\nimport {Link}                                 from \"react-router-dom\";\r\nimport ProfileCard                            from \"../../profiles/ProfileCard\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    attendees: Profile[];\r\n}\r\n\r\nconst followingImageStyles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 3\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendees({attendees}: Props)\r\n{\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee =>\r\n                (\r\n                    <Popup key={attendee.userName}\r\n                           hoverable\r\n                           trigger={\r\n                               <List.Item key={attendee.userName} as={Link} to={profilePath(attendee.userName)}>\r\n                                   <Image src={attendee.image || profileImagePlaceholder}\r\n                                          size={\"mini\"}\r\n                                          circular\r\n                                          bordered\r\n                                          style={attendee.following ? followingImageStyles : null}\r\n                                   />\r\n                               </List.Item>\r\n                           }\r\n                    >\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup>\r\n                ))}\r\n        </List>\r\n    )\r\n})","import React                                from \"react\";\r\nimport {Segment, Item, Icon, Button, Label} from \"semantic-ui-react\";\r\nimport {Link}                               from \"react-router-dom\";\r\nimport {Activity}                           from \"../../../app/models/activity\";\r\nimport {formatDate}                         from \"../../../utils/date-fns-utils\";\r\nimport ActivityListItemAttendees                            from \"./ActivityListItemAttendees\";\r\nimport {activityPath, profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props)\r\n{\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached={'top'}\r\n                           color={'red'}\r\n                           content={'Cancelled'}\r\n                           style={{textAlign: 'center'}}\r\n                    />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image src={activity.host?.image || profileImagePlaceholder}\r\n                                    as={Link}\r\n                                    to={profilePath(activity.hostUserName)}\r\n                                    size={\"tiny\"}\r\n                                    circular\r\n                                    style={{marginBottom: 3}}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={activityPath(activity.id)}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={profilePath(activity.hostUserName)}>\r\n                                {activity.host?.displayName}\r\n                            </Link>\r\n                            </Item.Description>\r\n                            {activity.isHosting &&\r\n                                (\r\n                                    <Item.Description>\r\n                                        <Label basic color={\"orange\"}>\r\n                                            You are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )\r\n                            }\r\n                            {activity.isGoing && !activity.isHosting &&\r\n                                (\r\n                                    <Item.Description>\r\n                                        <Label basic color={\"green\"}>\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name={\"clock\"}/> <span style={{marginRight: \"1em\"}}>{formatDate(activity.date, \"dd MMM yyyy hh:mm\")}</span>\r\n                <Icon name={\"marker\"}/>{activity.venue}\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendees attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={activityPath(activity.id)}\r\n                        color={\"teal\"}\r\n                        floated={\"right\"}\r\n                        content={\"View\"}\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, {Fragment}       from \"react\";\r\nimport {Header} from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\nimport {observer}              from \"mobx-react-lite\"\r\nimport ActivityListItem        from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList()\r\n    {\r\n        const {activityStore} = useStore();\r\n        const {groupedActivities} = activityStore;\r\n\r\n        return (\r\n            <>\r\n                {groupedActivities.map(([date, activities]) =>\r\n                    (\r\n                        <Fragment key={date}>\r\n                            <Header sub color={'teal'}>{date}</Header>\r\n                            {activities.map((activity) =>\r\n                                (\r\n                                    <ActivityListItem key={activity.id} activity={activity}/>\r\n                                ))}\r\n                        </Fragment>\r\n                    )\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n)","import React          from \"react\";\r\nimport Calendar       from \"react-calendar\";\r\nimport {Header, Menu} from \"semantic-ui-react\";\r\nimport {observer}     from \"mobx-react-lite\";\r\nimport {useStore}     from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {predicates, setPredicate} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size={'large'} style={{width: '100%', marginTop: '1.8em'}}>\r\n                <Header content={'Filters'} icon={'filter'} color={'teal'} attached/>\r\n                <Menu.Item\r\n                    content={'All Activities'}\r\n                    active={predicates.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content={\"I'm going\"}\r\n                    active={predicates.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content={\"I'm hosting\"}\r\n                    active={predicates.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicates.get('startDate')}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Grid, GridColumn, Loader}   from \"semantic-ui-react\";\r\nimport ActivityList                 from \"./ActivityList\";\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport ActivityFilters              from \"./ActivityFilters\";\r\nimport {PagingParams}               from \"../../../app/models/pagination\";\r\nimport InfiniteScroll               from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder  from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {activitiesByDate, loadActivities,\r\n        setPagingParams, pagination,\r\n        isLoadingInitial} = activityStore\r\n    const [isLoadingNextActivities, setIsLoadingNextActivities] = useState(false);\r\n\r\n    useEffect(() =>\r\n    {\r\n        if(activitiesByDate.length <= 1)\r\n        {\r\n            loadActivities()\r\n        }\r\n    }, [loadActivities, activitiesByDate.length]);\r\n\r\n    function getNextActivities()\r\n    {\r\n        if(pagination)\r\n        {\r\n            setIsLoadingNextActivities(true);\r\n            setPagingParams(new PagingParams(pagination.currentPage + 1))\r\n            loadActivities().then(() => setIsLoadingNextActivities(false));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={'10'}>\r\n                {isLoadingInitial && !isLoadingNextActivities ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={getNextActivities}\r\n                        hasMore={!isLoadingNextActivities\r\n                            && !!pagination\r\n                            && pagination.currentPage < pagination.totalPagesCount}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList/>\r\n                    </InfiniteScroll>\r\n                )}\r\n            </GridColumn>\r\n            <GridColumn width={'6'}>\r\n                <ActivityFilters />\r\n            </GridColumn>\r\n            <Grid.Column width={10}>\r\n                <Loader active={isLoadingNextActivities} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextInput(props: Props)\r\n{\r\n    const [field, meta] = useField(props.name);\r\n    \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import {ErrorMessage, Form, Formik} from \"formik\";\r\nimport React                                                     from \"react\";\r\nimport TextInput               from \"../../app/common/form/TextInput\";\r\nimport {Button, Header, Label} from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../app/stores/store\";\r\nimport {observer}                                  from \"mobx-react-lite\";\r\n\r\nexport default observer(function LoginForm()\r\n{\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.login(values)\r\n                        .catch(error => setErrors({error: \"Invalid email or password\"}))\r\n            }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className={\"ui form\"} onSubmit={handleSubmit} autoComplete={\"off\"}>\r\n                    <Header as='h2' content={\"Login to Reactivities\"} color={\"teal\"} textAlign={\"center\"}/>\r\n                    <TextInput placeholder={\"Email\"} name={\"email\"} />\r\n                    <TextInput placeholder={\"Password\"} name={\"password\"} type={\"password\"} />\r\n                    <ErrorMessage name={'error'} render={() =>\r\n                        (\r\n                        <Label style={{marginBottom: 10}} basic color={\"red\"} content={errors.error} />\r\n                    )} />\r\n                    <Button content={\"Login\"} type={\"submit\"} positive fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React     from \"react\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    errors: any;//string[];\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props)\r\n{\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((error: string, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {error}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n","import {ErrorMessage, Form, Formik} from \"formik\";\r\nimport React                        from \"react\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport {useStore}                   from \"../../app/stores/store\";\r\nimport {Button, Header}      from \"semantic-ui-react\";\r\nimport TextInput                    from \"../../app/common/form/TextInput\";\r\nimport * as Yup                     from \"yup\";\r\nimport ValidationErrors             from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm()\r\n{\r\n    const {userStore} = useStore();\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        userName: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: \"\", userName: \"\", email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.register(values)\r\n                    .catch(error => setErrors({error}))\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className={\"ui form error\"} onSubmit={handleSubmit} autoComplete={\"off\"}>\r\n                    <Header as='h2' content={\"Register to Reactivities\"} color={\"teal\"} textAlign={\"center\"}/>\r\n                    <TextInput placeholder={\"Display Name\"} name={\"displayName\"} />\r\n                    <TextInput placeholder={\"Username\"} name={\"userName\"} />\r\n                    <TextInput placeholder={\"Email\"} name={\"email\"} />\r\n                    <TextInput placeholder={\"Password\"} name={\"password\"} type={\"password\"} />\r\n                    <ErrorMessage name={'error'} render={() =>\r\n                        (\r\n                            <ValidationErrors errors={errors.error} />\r\n                        )} />\r\n                    <Button content={\"Register\"}\r\n                            type={\"submit\"}\r\n                            disabled={!isValid || !dirty || isSubmitting}\r\n                            positive fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React                                       from \"react\";\r\nimport {Link}                                      from \"react-router-dom\";\r\nimport {Button, Container, Header, Image, Segment} from \"semantic-ui-react\";\r\nimport {useStore}                                  from \"../../app/stores/store\";\r\nimport {observer}                                  from \"mobx-react-lite\";\r\nimport LoginForm                                   from \"../user/LoginForm\";\r\nimport RegisterForm               from \"../user/RegisterForm\";\r\nimport {activitiesPath, logoPath} from \"../../utils/paths\";\r\n\r\nexport default observer(function HomePage()\r\n{\r\n    const {userStore, modalStore} = useStore();\r\n    \r\n    return (\r\n        <Segment inverted vertical textAlign={'center'} className='masthead'>\r\n            <Container text>\r\n                <Header as={'h1'} inverted>\r\n                    <Image src={logoPath} alt={'logo'} size={'massive'} style={{marginBottom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn\r\n                    ? (\r\n                        <>\r\n                            <Header as={'h2'} inverted content={'Welcome to Reactivities'}/>\r\n                            <Button as={Link}\r\n                                    to={activitiesPath}\r\n                                    size={'huge'}\r\n                                    inverted>\r\n                                Go to activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm/>)}\r\n                                    size={'huge'}\r\n                                    inverted\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm/>)}\r\n                                    size={'huge'}\r\n                                    inverted\r\n                            >\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import {Profile} from \"./profile\";\r\n\r\nexport interface Activity\r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    attendees: Profile[];\r\n\r\n    //extra fields\r\n    isGoing: boolean;\r\n    isHosting: boolean;\r\n    host?: Profile;\r\n}\r\n\r\nexport class ActivityFormValues\r\n{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    category: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: Activity)\r\n    {\r\n        if(activity)\r\n        {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.date = activity.date;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n\r\n    public toActivity()\r\n    {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            date: this.date,\r\n            description: this.description,\r\n            category: this.category,\r\n            city: this.city,\r\n            venue: this.venue\r\n        } as Activity;\r\n    }\r\n}\r\n\r\nexport interface ProfileActivity\r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date;\r\n    category: string;\r\n}","import React from \"react\";\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\ninterface Properties\r\n{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Properties)\r\n{\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextAreaInput(props: Props)\r\n{\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React      from \"react\";\r\nimport {useField}            from \"formik\";\r\nimport {Form, Label, Select} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    options: any[];\r\n    label?: string;\r\n}\r\n\r\nexport default function SelectInput(props: Props)\r\n{\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select clearable\r\n                    options={props.options}\r\n                    value={field.value || null}\r\n                    onChange={(event, data) => helpers.setValue(data.value)}\r\n                    onBlur={() => helpers.setTouched(true)}\r\n                    placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {\r\n        text: 'Culture',\r\n        value: 'culture'\r\n    },\r\n    {\r\n        text: 'Film',\r\n        value: 'film'\r\n    },\r\n    {\r\n        text: 'Food',\r\n        value: 'food'\r\n    },\r\n    {\r\n        text: 'Meeting',\r\n        value: 'meeting'\r\n    },\r\n    {\r\n        text: 'Music',\r\n        value: 'music'\r\n    },\r\n    {\r\n        text: 'Travel',\r\n        value: 'travel'\r\n    },\r\n]","import React      from \"react\";\r\nimport {useField}    from \"formik\";\r\nimport {Form, Label}   from \"semantic-ui-react\";\r\nimport ReactDatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\ninterface Props extends Partial<ReactDatePickerProps>\r\n{\r\n    placeholderText: string;\r\n    name: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function DateInput(props: Props)\r\n{\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <ReactDatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(value) => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color={\"red\"}>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Button, Header}  from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    confirmCallback: () => void;\r\n    cancelCallback: () => void;\r\n    headerContent?: string;\r\n}\r\n\r\nexport default function ConfirmModal({confirmCallback, cancelCallback, headerContent}: Props)\r\n{\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    function handleConfirm()\r\n    {\r\n        setConfirmLoading(true);\r\n        confirmCallback();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header content={headerContent || 'Are you sure?'}\r\n                    as={'h2'}\r\n                    color={'teal'}\r\n                    style={{textAlign: 'center', marginBottom: '1em'}}\r\n            />\r\n            <div style={{display:'flex', justifyContent: 'center', width: '100%'}}>\r\n                <Button onClick={handleConfirm}\r\n                        icon={'check'}\r\n                        color={'green'}\r\n                        basic\r\n                        loading={confirmLoading}\r\n                        style={{padding: '1em 2em'}}\r\n                />\r\n                <Button onClick={cancelCallback}\r\n                        icon={'cancel'}\r\n                        color={'red'}\r\n                        basic\r\n                        style={{padding: '1em 2em'}}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Header, Segment}    from \"semantic-ui-react\";\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\nimport {observer}                     from \"mobx-react-lite\";\r\nimport {ActivityFormValues}          from \"../../../app/models/activity\";\r\nimport {useParams, useHistory, Link}  from \"react-router-dom\";\r\nimport LoadingComponent               from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid}                   from \"uuid\";\r\nimport {Formik, Form}                 from \"formik\";\r\nimport * as Yup                       from \"yup\"\r\nimport TextInput                      from \"../../../app/common/form/TextInput\"\r\nimport TextAreaInput                  from \"../../../app/common/form/TextAreaInput\";\r\nimport SelectInput                    from \"../../../app/common/form/SelectInput\";\r\nimport {categoryOptions}              from \"../../../app/common/options/—ÅategoryOptions\";\r\nimport DateInput                      from \"../../../app/common/form/DateInput\";\r\nimport {activitiesPath, activityPath} from \"../../../utils/paths\";\r\nimport ConfirmModal                   from \"../../../app/common/modal/ConfirmModal\";\r\n\r\nexport default observer(function ActivityForm()\r\n{\r\n    const { activityStore, modalStore } = useStore();\r\n    const {loadActivity, deleteActivity, selectedActivity} = activityStore;\r\n    const {id} = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        date: Yup.string().required(),\r\n        category: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (id)\r\n        {\r\n            loadActivity(id)\r\n                .then(activity => setActivity(new ActivityFormValues(activity)))\r\n        }\r\n    }, [id, loadActivity])\r\n\r\n    async function handleFormSubmit(activity: ActivityFormValues)\r\n    {\r\n        if (!activity.id)\r\n        {\r\n            //create activity\r\n            activity.id = uuid();\r\n            await activityStore.createActivity(activity);\r\n        }\r\n        else\r\n        {\r\n            //update activity\r\n            await activityStore.editActivity(activity);\r\n        }\r\n\r\n        history.push(activityPath(activity.id));\r\n    }\r\n\r\n    function onDeleteClick()\r\n    {\r\n        modalStore.openModal(\r\n            <ConfirmModal\r\n                headerContent={\"Are you sure you want to delete this activity?\"}\r\n                confirmCallback={handleDeleteActivity}\r\n                cancelCallback={modalStore.closeModal}\r\n            />\r\n        )\r\n    }\r\n\r\n    function handleDeleteActivity()\r\n    {\r\n        deleteActivity(selectedActivity!.id)\r\n            .then(() => {\r\n                modalStore.closeModal();\r\n                history.push(activitiesPath);\r\n            })\r\n    }\r\n\r\n    if (activityStore.isLoadingInitial)\r\n        return <LoadingComponent content={'Loading activity...'}/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik validationSchema={validationSchema}\r\n                    enableReinitialize\r\n                    initialValues={activity}\r\n                    onSubmit={handleFormSubmit}>\r\n                {({\r\n                      handleSubmit, isSubmitting, dirty, isValid\r\n                  }) =>\r\n                    (\r\n                        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete={'off'}>\r\n                            <Header content={\"Activity Details\"} sub color={\"teal\"}/>\r\n                            <TextInput placeholder={\"Title\"}\r\n                                       name={\"title\"}\r\n                            />\r\n                            <TextAreaInput placeholder={\"Description of the activity\"}\r\n                                           name={\"description\"}\r\n                                           rows={3}\r\n                            />\r\n                            <SelectInput placeholder={'Category'}\r\n                                         name={\"category\"}\r\n                                         options={categoryOptions}\r\n                            />\r\n                            <DateInput placeholderText={\"Date\"}\r\n                                       name={\"date\"}\r\n                                       showTimeSelect\r\n                                       timeCaption={\"time\"}\r\n                                       dateFormat={\"MMMM d, yyyy hh:mm\"}\r\n                            />\r\n\r\n                            <Header content={\"Location Details\"} sub color={\"teal\"}/>\r\n                            <TextInput placeholder={\"City\"}\r\n                                       name={\"city\"}\r\n                            />\r\n                            <TextInput placeholder={\"Venue\"}\r\n                                       name={\"venue\"}\r\n                            />\r\n                            {id &&\r\n                                <Button onClick={onDeleteClick}\r\n                                        type={'button'}\r\n                                        floated={'right'}\r\n                                        icon={'trash'}\r\n                                        basic\r\n                                        disabled={isSubmitting}\r\n                                        color={'red'}\r\n                                />\r\n                            }\r\n                            <Button type={'submit'}\r\n                                    content={'Submit'}\r\n                                    positive\r\n                                    floated={\"left\"}\r\n                                    loading={isSubmitting}\r\n                                    disabled={isSubmitting || !dirty || !isValid} />\r\n                            <Button as={Link}\r\n                                    to={activitiesPath}\r\n                                    floated={'left'}\r\n                                    type={'button'}\r\n                                    content='Cancel'\r\n                                    disabled={isSubmitting}/>\r\n                        </Form>\r\n                    )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import {observer}                                           from 'mobx-react-lite';\r\nimport React                                                from 'react'\r\nimport {Button, Header, Item, Segment, Image, Label}        from 'semantic-ui-react'\r\nimport {Activity}                                           from \"../../../app/models/activity\";\r\nimport {Link}                                               from \"react-router-dom\";\r\nimport {formatDate}                                         from \"../../../utils/date-fns-utils\";\r\nimport {useStore}                                           from \"../../../app/stores/store\";\r\nimport {categoryImagePath, manageActivityPath, profilePath} from \"../../../utils/paths\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props\r\n{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props)\r\n{\r\n    const {activityStore} = useStore();\r\n    const {\r\n        updateAttendance, isLoading,\r\n        cancelSelectedActivityToggle\r\n    } = activityStore\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                           ribbon\r\n                           color={\"red\"}\r\n                           content={\"Cancelled\"}\r\n                    />\r\n                }\r\n\r\n                <Image src={categoryImagePath(`${activity.category}.jpg`)} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{formatDate(activity.date, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                    <Link to={profilePath(activity.hostUserName)}>\r\n                                        {activity.host?.displayName}\r\n                                    </Link>\r\n                                </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHosting ? (\r\n                    <>\r\n                        <Button onClick={cancelSelectedActivityToggle}\r\n                                color={activity.isCancelled ? \"green\" : \"red\"}\r\n                                floated={\"left\"}\r\n                                basic\r\n                                loading={isLoading}\r\n                        >\r\n                            {activity.isCancelled ? \"Re-activate activity\" : \"Cancel activity\"}\r\n                        </Button>\r\n                        <Button as={Link}\r\n                                to={manageActivityPath(activity.id)}\r\n                                disabled={activity.isCancelled}\r\n                                color='orange'\r\n                                floated='right'\r\n                                content={'Manage Event'}\r\n                        />\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={isLoading}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button onClick={updateAttendance}\r\n                            loading={isLoading}\r\n                            color='teal'\r\n                            disabled={activity.isCancelled}\r\n                    >\r\n                        Join Activity\r\n                    </Button>\r\n                )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import {observer}            from 'mobx-react-lite';\r\nimport React                 from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity}   from \"../../../app/models/activity\";\r\nimport {formatDate} from \"../../../utils/date-fns-utils\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props)\r\n{\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {formatDate(activity.date, \"dd MMM yyyy hh:mm\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import {observer}                                 from 'mobx-react-lite'\r\nimport React, {useEffect}                         from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport {profileImagePlaceholder, profilePath}     from \"../../../utils/paths\";\r\nimport {useStore}                                 from \"../../../app/stores/store\";\r\nimport {Link}                                     from \"react-router-dom\";\r\nimport {Formik, Form, Field, FieldProps}          from 'formik';\r\nimport * as Yup                                   from 'yup';\r\nimport {formatDistanceToNow}                      from \"date-fns\";\r\n\r\ninterface Props\r\n{\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props)\r\n{\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (activityId)\r\n        {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () =>\r\n        {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    <Formik initialValues={{body: ''}}\r\n                            onSubmit={(values, {resetForm}) => commentStore.addComment(values.body)\r\n                                .then(() => resetForm())}\r\n                            validationSchema={Yup.object({\r\n                                body: Yup.string().required()\r\n                            })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) =>\r\n                            (\r\n                                <Form className={'ui form'}>\r\n                                    <Field name={'body'}>\r\n                                        {(props: FieldProps) =>\r\n                                            (\r\n                                                <div style={{position: 'relative'}}>\r\n                                                    <Loader active={isSubmitting} />\r\n                                                    <textarea\r\n                                                        placeholder={'Enter your comment'}\r\n                                                        rows={2}\r\n                                                        {...props.field}\r\n                                                        onKeyPress={event =>\r\n                                                        {\r\n                                                            if(event.key === 'Enter' && event.shiftKey)\r\n                                                                return;\r\n\r\n                                                            if(event.key === 'Enter' && !event.shiftKey)\r\n                                                            {\r\n                                                                event.preventDefault();\r\n\r\n                                                                if(isValid)\r\n                                                                    handleSubmit();\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            )}\r\n                                    </Field>\r\n                                </Form>\r\n                            )}\r\n                    </Formik>\r\n\r\n                    {commentStore.comments.map(comment =>\r\n                        (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || profileImagePlaceholder}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={profilePath(comment.userName)}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import React                               from 'react'\r\nimport {Segment, List, Label, Item, Image} from 'semantic-ui-react'\r\nimport {Link}                              from 'react-router-dom'\r\nimport {observer}                          from 'mobx-react-lite'\r\nimport {Activity}                             from \"../../../app/models/activity\";\r\nimport {profileImagePlaceholder, profilePath} from \"../../../utils/paths\";\r\n\r\ninterface Props\r\n{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({activity: {attendees, host}}: Props)\r\n{\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{border: 'none'}}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>\r\n                        (\r\n                            <Item key={attendee.userName} style={{position: 'relative'}}>\r\n                                {attendee.userName === host?.userName &&\r\n                                    <Label\r\n                                        style={{position: 'absolute'}}\r\n                                        color='orange'\r\n                                        ribbon='right'\r\n                                    >\r\n                                        Host\r\n                                    </Label>\r\n                                }\r\n\r\n                                <Image size='tiny' src={attendee.image || profileImagePlaceholder}/>\r\n                                <Item.Content verticalAlign='middle'>\r\n                                    <Item.Header as='h3'>\r\n                                        <Link to={profilePath(attendee.userName)}>{attendee.displayName}</Link>\r\n                                    </Item.Header>\r\n                                    {attendee.following &&\r\n                                        <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\r\n                                    }\r\n                                </Item.Content>\r\n                            </Item>\r\n                        ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import React, {useEffect}      from \"react\";\r\nimport {Grid}                  from \"semantic-ui-react\";\r\nimport {useStore}              from \"../../../app/stores/store\";\r\nimport LoadingComponent        from \"../../../app/layout/LoadingComponent\";\r\nimport {useParams}             from 'react-router-dom';\r\nimport {observer}              from \"mobx-react-lite\";\r\nimport ActivityDetailedHeader  from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo    from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat    from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails()\r\n{\r\n    const { activityStore } = useStore();\r\n    const {selectedActivity: activity} = activityStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (id)\r\n            activityStore.loadActivity(id)\r\n\r\n        return () => activityStore.clearSelectedActivity();\r\n    }, [id, activityStore])\r\n\r\n    if (activityStore.isLoadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'10'}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={'6'}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, {useState}         from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios                     from 'axios';\r\nimport ValidationErrors from \"./ValidationErrors\";\r\nimport {apiBaseUrl}     from \"../../utils/paths\";\r\n\r\nexport default function TestErrors()\r\n{\r\n    const baseUrl = apiBaseUrl;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound()\r\n    {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest()\r\n    {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError()\r\n    {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised()\r\n    {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid()\r\n    {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError()\r\n    {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component'/>\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary/>\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary/>\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary/>\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary/>\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary/>\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary/>\r\n                </Button.Group>\r\n                {errors &&\r\n                    <ValidationErrors errors={errors}/>\r\n                }\r\n            </Segment>\r\n        </>\r\n    )\r\n}\r\n","import React                           from \"react\";\r\nimport {Button, Header, Icon, Segment} from \"semantic-ui-react\";\r\nimport {Link}           from \"react-router-dom\";\r\nimport {activitiesPath} from \"../../utils/paths\";\r\n\r\nexport default function NotFound()\r\n{\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name={'search'} />\r\n                Oops, we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to={activitiesPath} primary>\r\n                    Go to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React                        from \"react\";\r\nimport {useStore}                   from \"../../app/stores/store\";\r\nimport {Container, Header, Segment} from \"semantic-ui-react\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\n\r\nexport default observer(function ServerError()\r\n{\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h2' content={'Server Error'}/>\r\n            <Header sub as={'h3'} content={commonStore.error?.message} color={'red'}/>\r\n            {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header sub as={'h4'} content={'Stack Trace'} color={'teal'} style={{marginBottom: '10px'}} />\r\n                <code>{commonStore.error.details}</code>\r\n            </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React      from \"react\";\r\nimport {useStore} from \"../../stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Modal}    from \"semantic-ui-react\";\r\n\r\nexport default observer(function ModalContainer()\r\n{\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.isOpen} onClose={modalStore.closeModal} size={\"mini\"}>\r\n            <Modal.Content>\r\n                {modalStore.content}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React                                                             from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic} from \"semantic-ui-react\";\r\nimport {profileImagePlaceholder}                          from \"../../../utils/paths\";\r\nimport {observer}                                         from \"mobx-react-lite\";\r\nimport {Profile}    from \"../../../app/models/profile\";\r\nimport FollowButton from \"../followings/FollowButton\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    isCurrentUser: boolean;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props)\r\n{\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={'12'}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image src={profile.image || profileImagePlaceholder} size={'small'} avatar/>\r\n                            <Item.Content verticalAlign={'middle'}>\r\n                                <Header as={'h1'} content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={'4'}>\r\n                    <Statistic.Group widths={'2'}>\r\n                        <Statistic label={'Followers'} value={profile.followersCount}/>\r\n                        <Statistic label={'Following'} value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n\r\n                    <Divider/>\r\n\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone}  from 'react-dropzone'\r\nimport {Header, Icon} from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    setFiles: (files: any[]) => void;\r\n}\r\n\r\nconst zoneStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n}\r\n\r\nconst zoneActive = {\r\n    borderColor: 'green'\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props)\r\n{\r\n    const onDrop = useCallback(acceptedFiles =>\r\n    {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(File, {\r\n            preview: URL.createObjectURL(file)\r\n        })));\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...zoneStyles, ...zoneActive} : zoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name={'upload'} size={'huge'} />\r\n            <Header content={'Drop image here'} />\r\n        </div>\r\n    )\r\n}","import React     from \"react\";\r\nimport 'cropperjs/dist/cropper.css'\r\nimport {Cropper} from \"react-cropper\";\r\n\r\ninterface Props\r\n{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props)\r\n{\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode={'move'}\r\n            autoCropArea={1}\r\n            modal={false}\r\n            background={false}\r\n            zoomOnWheel={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useEffect, useState}  from \"react\";\r\nimport {Button, Grid, Header} from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone           from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper    from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props\r\n{\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props)\r\n{\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop()\r\n    {\r\n        if(cropper)\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        return () =>{\r\n            files.forEach((file: any) => URL.revokeObjectURL(file));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 1 - Upload photo'}/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={'1'}/>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 2 - Resize image'}/>\r\n                {files.length > 0 &&\r\n                    (\r\n                        <PhotoWidgetCropper imagePreview={files[0].preview} setCropper={setCropper} />\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'1'}/>\r\n            <Grid.Column width={'4'}>\r\n                <Header sub color={'teal'} content={'Step 1 - Preview upload'}/>\r\n                {files.length > 0 &&\r\n                <>\r\n                    <div className={'img-preview'} style={{minHeight: 182, overflow: \"hidden\"}} />\r\n                    <Button.Group widths={2} attached={'bottom'}>\r\n                        <Button onClick={onCrop}\r\n                                loading={loading}\r\n                                disabled={loading}\r\n                                icon={\"check\"}\r\n                                positive />\r\n                        <Button onClick={() => setFiles([])}\r\n                                disabled={loading}\r\n                                icon={\"close\"} />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React, {SyntheticEvent, useState}   from \"react\";\r\nimport {observer}                          from \"mobx-react-lite\";\r\nimport {Card, Header, Image, Grid, Button} from \"semantic-ui-react\";\r\nimport {Photo}                             from \"../../../app/models/profile\";\r\nimport {useStore}                          from \"../../../app/stores/store\";\r\nimport PhotoUploadWidget                   from \"../../../app/common/imageUploader/PhotoUploadWidget\";\r\nimport NotFound                            from \"../../errors/NotFound\";\r\n\r\nexport default observer(function ProfilePhotos()\r\n{\r\n    const [inAddPhotoMode, setInAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | null>(null);\r\n\r\n    const {profileStore} = useStore();\r\n    const {\r\n        profile, isCurrentUser,\r\n        uploadPhoto, isUploading,\r\n        setMainImage, isLoading,\r\n        deleteImage\r\n    } = profileStore;\r\n\r\n    if(!profile)\r\n        return <NotFound />\r\n\r\n    function handlePhotoUpload(file: Blob)\r\n    {\r\n        uploadPhoto(file).then(() => setInAddPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        if (target)\r\n            return;\r\n\r\n        setTarget(event.currentTarget.name);\r\n        setMainImage(photo).then(() => setTarget(null));\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        if (target)\r\n            return;\r\n\r\n        setTarget(event.currentTarget.name);\r\n        deleteImage(photo).then(() => setTarget(null))\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                <Header icon={'image'} content={'Photos'} floated={'left'}/>\r\n                {isCurrentUser &&\r\n                    <Button floated={'right'} basic\r\n                            content={inAddPhotoMode ? 'Cancel' : 'Add photo'}\r\n                            onClick={() => setInAddPhotoMode(!inAddPhotoMode)}\r\n                    />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'16'}>\r\n                {inAddPhotoMode ? (\r\n                    <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={isUploading}/>\r\n                ) : (\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {profile.photos?.map(photo =>\r\n                            (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser &&\r\n                                        <Button.Group widths={2} attached={'bottom'} fluid>\r\n                                            <Button onClick={(event) => handleSetMainPhoto(photo, event)}\r\n                                                    content={\"Main\"}\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={isLoading && target === 'main' + photo.id}\r\n                                                    basic\r\n                                                    color={\"green\"}\r\n                                                    style={{zIndex: 1}}\r\n                                            />\r\n                                            <Button onClick={(event) => handleDeletePhoto(photo, event)}\r\n                                                    icon={'trash'}\r\n                                                    name={photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={isLoading && target === photo.id}\r\n                                                    basic\r\n                                                    color={'grey'}\r\n                                            />\r\n                                        </Button.Group>}\r\n                                </Card>\r\n                            ))}\r\n                    </Card.Group>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import {Form, Formik}               from \"formik\";\r\nimport React                        from \"react\";\r\nimport {Profile, ProfileFormValues} from \"../../../app/models/profile\";\r\nimport {observer}                   from \"mobx-react-lite\";\r\nimport TextInput                    from \"../../../app/common/form/TextInput\";\r\nimport TextAreaInput                from \"../../../app/common/form/TextAreaInput\";\r\nimport {Button}                     from \"semantic-ui-react\";\r\nimport * as Yup                     from 'yup';\r\nimport {useStore}                   from \"../../../app/stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    onSubmitted?: () => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({profile, onSubmitted}: Props)\r\n{\r\n    const {profileStore} = useStore();\r\n    const {updateProfile} = profileStore;\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('Display name is required')\r\n    })\r\n\r\n    function handleSubmit(profile: ProfileFormValues)\r\n    {\r\n        updateProfile(profile).then(onSubmitted)\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={{displayName: profile.displayName, about: profile.about}}\r\n                validationSchema={validationSchema}\r\n                onSubmit={handleSubmit}>\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className={'ui form'}>\r\n                    <TextInput placeholder={'DisplayName'} name={'displayName'}/>\r\n                    <TextAreaInput placeholder={'About me'} name={'about'} rows={5}/>\r\n                    <Button\r\n                        type={'submit'}\r\n                        content={'Update profile'}\r\n                        floated={'right'}\r\n                        positive\r\n                        loading={isSubmitting}\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState}      from \"react\";\r\nimport {observer}             from \"mobx-react-lite\";\r\nimport {Button, Grid, Header} from \"semantic-ui-react\";\r\nimport {useStore}       from \"../../../app/stores/store\";\r\nimport ProfileAboutEdit from \"./ProfileEditForm\";\r\nimport NotFound         from \"../../errors/NotFound\";\r\n\r\nexport default observer(function ProfileAbout()\r\n{\r\n    const {profileStore} = useStore();\r\n    const { profile, isCurrentUser } = profileStore;\r\n    const [inEditMode, setInEditMode] = useState(false);\r\n\r\n    if(!profile)\r\n        return <NotFound />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                <Header content={`About ${profile.displayName}`} icon={'user'} floated={'left'} />\r\n                {isCurrentUser &&\r\n                    <Button content={inEditMode ? 'Cancel' : 'Edit Profile'}\r\n                            floated={'right'}\r\n                            basic\r\n                            onClick={() => setInEditMode(!inEditMode)}\r\n                    />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={'16'}>\r\n                {inEditMode ? (\r\n                    <ProfileAboutEdit profile={profile} onSubmitted={() => setInEditMode(false)} />\r\n                ) : (\r\n                    <span style={{whiteSpace: 'pre-line'}}>{profile.about || `Hello, I am ${profile.displayName}`}</span>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                from \"react\";\r\nimport {observer}           from \"mobx-react-lite\";\r\nimport {Card, Grid, Header} from \"semantic-ui-react\";\r\nimport {useStore}           from \"../../../app/stores/store\";\r\nimport ProfileCard          from \"../ProfileCard\";\r\nimport {ActiveTab}          from \"../../../app/stores/profileStore\";\r\n\r\nexport default observer(function ProfileFollowings()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, activeTab} = profileStore\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Header\r\n                    floated={\"left\"}\r\n                    icon={'user'}\r\n                    content={activeTab === ActiveTab.Following\r\n                        ? `People ${profile?.displayName} is following`\r\n                        : `People following ${profile?.displayName}`}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Card.Group itemsPerRow={4}>\r\n                    {followings.map(profile =>\r\n                        (\r\n                            <ProfileCard key={profile.userName} profile={profile}/>\r\n                        ))}\r\n                </Card.Group>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                             from \"react\";\r\nimport {ProfileActivity}                 from \"../../../app/models/activity\";\r\nimport {Card, Image}                     from \"semantic-ui-react\";\r\nimport {activityPath, categoryImagePath} from \"../../../utils/paths\";\r\nimport {formatDate}                      from \"../../../utils/date-fns-utils\";\r\nimport {Link}                            from \"react-router-dom\";\r\n\r\ninterface Props\r\n{\r\n    activity: ProfileActivity;\r\n}\r\n\r\nexport default function ProfileActivityCard({activity}: Props)\r\n{\r\n    const now = new Date();\r\n\r\n    return (\r\n        <Card as={Link} to={activityPath(activity.id)}>\r\n            <Image src={categoryImagePath(`${activity.category}.jpg`)} disabled={activity.date < now}/>\r\n            <Card.Content textAlign={'center'}>\r\n                <Card.Header>{activity.title}</Card.Header>\r\n                <Card.Meta>{formatDate(activity.date, \"dd MMM\")}</Card.Meta>\r\n                <Card.Meta>{formatDate(activity.date, \"hh:mm\")}</Card.Meta>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}","import React, {SyntheticEvent, useEffect}          from \"react\";\r\nimport {Card, Grid, Header, Loader, Tab, TabProps} from \"semantic-ui-react\";\r\nimport {observer}                                  from \"mobx-react-lite\";\r\nimport {useStore}                                  from \"../../../app/stores/store\";\r\nimport {ProfileActivitiesPredicate}                from \"../../../app/models/profile\";\r\nimport ProfileActivityCard                         from \"./ProfileActivityCard\";\r\n\r\nclass Pane\r\n{\r\n    menuItem: string;\r\n    key: ProfileActivitiesPredicate;\r\n\r\n    constructor(menuItem: string, key: ProfileActivitiesPredicate)\r\n    {\r\n        this.menuItem = menuItem;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nconst panes = [\r\n    new Pane('Future Events', 'future'),\r\n    new Pane('Past Events', 'past'),\r\n    new Pane('Hosting', 'hosting')\r\n]\r\n\r\nexport default observer(function ProfileEvents()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {profileActivities, isLoading, loadProfileActivities, clearProfileActivities} = profileStore;\r\n\r\n    useEffect(() =>\r\n    {\r\n        loadProfileActivities(panes[0].key)\r\n\r\n        return () =>\r\n        {\r\n            clearProfileActivities()\r\n        };\r\n    }, [loadProfileActivities, clearProfileActivities])\r\n\r\n\r\n    function handleTabChange(event: SyntheticEvent, data: TabProps)\r\n    {\r\n        const index = data.activeIndex as number;\r\n        loadProfileActivities(panes[index].key);\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Header icon={'calendar'} content={'Activities'}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                <Tab panes={panes}\r\n                     menu={{secondary: true, pointing: true}}\r\n                     onTabChange={handleTabChange}\r\n                     defaultActiveIndex={0}\r\n\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n                {isLoading ? (\r\n                    <Loader active={true}/>\r\n                ) : (\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {profileActivities.map(activity => (\r\n                            <ProfileActivityCard key={activity.id} activity={activity}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React             from \"react\";\r\nimport {Tab}             from \"semantic-ui-react\";\r\nimport {observer}    from \"mobx-react-lite\";\r\nimport ProfilePhotos from \"../photos/ProfilePhotos\";\r\nimport ProfileAbout  from \"../about/ProfileAbout\";\r\nimport ProfileFollowings from \"../followings/ProfileFollowings\";\r\nimport {useStore}    from \"../../../app/stores/store\";\r\nimport ProfileEvents from \"../activities/ProfileEvents\";\r\n\r\nexport default observer(function ProfileContent()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {isLoadingFollowers} = profileStore\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane><ProfileAbout /></Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <Tab.Pane><ProfilePhotos /></Tab.Pane>},\r\n        {menuItem: 'Events', render: () => <Tab.Pane><ProfileEvents /></Tab.Pane>},\r\n        {\r\n            menuItem: 'Followers', render: () =>\r\n                <Tab.Pane loading={isLoadingFollowers}>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n        },\r\n        {\r\n            menuItem: 'Following', render: () =>\r\n                <Tab.Pane loading={isLoadingFollowers}>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition={'right'}\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.activeTab = data.activeIndex}\r\n        />\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport {useParams}      from \"react-router-dom\";\r\nimport {useStore}    from \"../../../app/stores/store\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport {Grid}           from \"semantic-ui-react\";\r\nimport ProfileContent   from \"./ProfileContent\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {observer}       from \"mobx-react-lite\";\r\n\r\nexport default observer(function ProfilePage()\r\n{\r\n    const {userName} = useParams<{ userName: string }>();\r\n\r\n    const {profileStore} = useStore();\r\n    const {profile, loadProfile, isLoadingProfile, isCurrentUser} = profileStore;\r\n\r\n    useEffect(() =>\r\n    {\r\n        loadProfile(userName);\r\n\r\n        return () =>\r\n        {\r\n            profileStore.activeTab = 0;\r\n        }\r\n    }, [loadProfile, userName, profileStore])\r\n\r\n    if (isLoadingProfile)\r\n        return <LoadingComponent content={\"Loading profile...\"}/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={'16'}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} isCurrentUser={isCurrentUser} />\r\n                        <ProfileContent />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React                                              from \"react\";\r\nimport {Redirect, Route, RouteComponentProps, RouteProps} from \"react-router-dom\";\r\nimport {useStore}                                         from \"../stores/store\";\r\nimport {homePagePath}                                     from \"../../utils/paths\";\r\n\r\ninterface Props extends RouteProps\r\n{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props)\r\n{\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={homePagePath} />}\r\n        />\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport {Container}        from \"semantic-ui-react\";\nimport NavBar             from \"./NavBar\";\nimport ActivityDashboard  from \"../../features/activity/dashboard/ActivityDashboard\";\nimport {observer}         from \"mobx-react-lite\";\nimport {Route, Switch}    from \"react-router-dom\";\nimport HomePage           from \"../../features/home/HomePage\";\nimport ActivityForm       from \"../../features/activity/form/ActivityForm\";\nimport ActivityDetails    from \"../../features/activity/details/ActivityDetails\";\nimport {useLocation}      from 'react-router-dom';\nimport TestError          from '../../features/errors/TestError';\nimport {ToastContainer}   from \"react-toastify\";\nimport NotFound           from \"../../features/errors/NotFound\";\nimport ServerError        from \"../../features/errors/ServerError\";\nimport {useStore}         from \"../stores/store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer   from \"../common/modal/ModalContainer\";\nimport ProfilePage      from \"../../features/profiles/main/ProfilePage\";\nimport {\n    activitiesPath,\n    activityPath,\n    createActivityPath,\n    errorsPath, homePagePath,\n    manageActivityPath, profilePath,\n    serverErrorPath\n}                       from \"../../utils/paths\";\nimport PrivateRoute     from \"./PrivateRoute\";\n\nfunction App()\n{\n    const location = useLocation();\n    const {userStore, commonStore} = useStore();\n\n    useEffect(() =>\n    {\n        if (commonStore.token)\n        {\n            userStore.loadCurrentUser().finally(() => commonStore.setAppLoaded());\n        }\n        else\n        {\n            commonStore.setAppLoaded();\n        }\n    }, [userStore, commonStore])\n\n    if (!commonStore.appLoaded)\n        return <LoadingComponent content={\"Loading app...\"}/>\n\n    return (\n        <>\n            <ToastContainer position={'bottom-right'} hideProgressBar/>\n            <ModalContainer/>\n            <Route exact path={homePagePath} component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        <NavBar/>\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <PrivateRoute exact path={activitiesPath} component={ActivityDashboard}/>\n                                <PrivateRoute path={activityPath(':id')} component={ActivityDetails}/>\n                                <PrivateRoute key={location.key}\n                                       path={[createActivityPath, manageActivityPath(':id')]}\n                                       component={ActivityForm}/>\n                                <PrivateRoute path={profilePath(':userName')} component={ProfilePage}/>\n                                <PrivateRoute path={errorsPath} component={TestError}/>\n                                <Route path={serverErrorPath} component={ServerError}/>\n                                <PrivateRoute component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React                 from 'react';\nimport ReactDOM               from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App                    from './app/layout/App';\nimport reportWebVitals        from './reportWebVitals';\nimport {store, StoreContext}  from \"./app/stores/store\";\nimport {Router}               from \"react-router-dom\";\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop            from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App/>\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}